<?php
/**
 * BatchApi
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Batches
 *
 * Endpoints for handling batches
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\RestAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use USAePay\ApiException;
use USAePay\Configuration;
use USAePay\HeaderSelector;
use USAePay\ObjectSerializer;

/**
 * BatchApi Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BatchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchesBatchKeyGet
     *
     * Retrieves a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchDetails
     */
    public function batchesBatchKeyGet($batch_key)
    {
        list($response) = $this->batchesBatchKeyGetWithHttpInfo($batch_key);
        return $response;
    }

    /**
     * Operation batchesBatchKeyGetWithHttpInfo
     *
     * Retrieves a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesBatchKeyGetWithHttpInfo($batch_key)
    {
        $request = $this->batchesBatchKeyGetRequest($batch_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchDetails';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesBatchKeyGetAsync
     *
     * Retrieves a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesBatchKeyGetAsync($batch_key)
    {
        return $this->batchesBatchKeyGetAsyncWithHttpInfo($batch_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesBatchKeyGetAsyncWithHttpInfo
     *
     * Retrieves a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesBatchKeyGetAsyncWithHttpInfo($batch_key)
    {
        $returnType = '\USAePay\Model\BatchDetails';
        $request = $this->batchesBatchKeyGetRequest($batch_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesBatchKeyGet'
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesBatchKeyGetRequest($batch_key)
    {
        // verify the required parameter 'batch_key' is set
        if ($batch_key === null || (is_array($batch_key) && count($batch_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_key when calling batchesBatchKeyGet'
            );
        }

        $resourcePath = '/batches/{batch_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($batch_key !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_key' . '}',
                ObjectSerializer::toPathValue($batch_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchesBatchKeyTransactionsGet
     *
     * Retrieves transactin detail for a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchTransactions
     */
    public function batchesBatchKeyTransactionsGet($batch_key, $limit = 20, $offset = 0, $return_bin = null)
    {
        list($response) = $this->batchesBatchKeyTransactionsGetWithHttpInfo($batch_key, $limit, $offset, $return_bin);
        return $response;
    }

    /**
     * Operation batchesBatchKeyTransactionsGetWithHttpInfo
     *
     * Retrieves transactin detail for a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchTransactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesBatchKeyTransactionsGetWithHttpInfo($batch_key, $limit = 20, $offset = 0, $return_bin = null)
    {
        $request = $this->batchesBatchKeyTransactionsGetRequest($batch_key, $limit, $offset, $return_bin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchTransactions' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchTransactions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchTransactions';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchTransactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesBatchKeyTransactionsGetAsync
     *
     * Retrieves transactin detail for a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesBatchKeyTransactionsGetAsync($batch_key, $limit = 20, $offset = 0, $return_bin = null)
    {
        return $this->batchesBatchKeyTransactionsGetAsyncWithHttpInfo($batch_key, $limit, $offset, $return_bin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesBatchKeyTransactionsGetAsyncWithHttpInfo
     *
     * Retrieves transactin detail for a specific batch.
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesBatchKeyTransactionsGetAsyncWithHttpInfo($batch_key, $limit = 20, $offset = 0, $return_bin = null)
    {
        $returnType = '\USAePay\Model\BatchTransactions';
        $request = $this->batchesBatchKeyTransactionsGetRequest($batch_key, $limit, $offset, $return_bin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesBatchKeyTransactionsGet'
     *
     * @param  string $batch_key Specifies batch to retrieve. (required)
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesBatchKeyTransactionsGetRequest($batch_key, $limit = 20, $offset = 0, $return_bin = null)
    {
        // verify the required parameter 'batch_key' is set
        if ($batch_key === null || (is_array($batch_key) && count($batch_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_key when calling batchesBatchKeyTransactionsGet'
            );
        }

        $resourcePath = '/batches/{batch_key}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($return_bin !== null) {
            $queryParams['return_bin'] = ObjectSerializer::toQueryValue($return_bin);
        }

        // path params
        if ($batch_key !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_key' . '}',
                ObjectSerializer::toPathValue($batch_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchesCurrentClosePost
     *
     * Closes the currently open batch
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchSummary
     */
    public function batchesCurrentClosePost()
    {
        list($response) = $this->batchesCurrentClosePostWithHttpInfo();
        return $response;
    }

    /**
     * Operation batchesCurrentClosePostWithHttpInfo
     *
     * Closes the currently open batch
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesCurrentClosePostWithHttpInfo()
    {
        $request = $this->batchesCurrentClosePostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchSummary' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchSummary';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesCurrentClosePostAsync
     *
     * Closes the currently open batch
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentClosePostAsync()
    {
        return $this->batchesCurrentClosePostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesCurrentClosePostAsyncWithHttpInfo
     *
     * Closes the currently open batch
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentClosePostAsyncWithHttpInfo()
    {
        $returnType = '\USAePay\Model\BatchSummary';
        $request = $this->batchesCurrentClosePostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesCurrentClosePost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesCurrentClosePostRequest()
    {

        $resourcePath = '/batches/current/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchesCurrentGet
     *
     * Retrieves the currently open batch.
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchDetails
     */
    public function batchesCurrentGet()
    {
        list($response) = $this->batchesCurrentGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation batchesCurrentGetWithHttpInfo
     *
     * Retrieves the currently open batch.
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesCurrentGetWithHttpInfo()
    {
        $request = $this->batchesCurrentGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchDetails';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesCurrentGetAsync
     *
     * Retrieves the currently open batch.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentGetAsync()
    {
        return $this->batchesCurrentGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesCurrentGetAsyncWithHttpInfo
     *
     * Retrieves the currently open batch.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentGetAsyncWithHttpInfo()
    {
        $returnType = '\USAePay\Model\BatchDetails';
        $request = $this->batchesCurrentGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesCurrentGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesCurrentGetRequest()
    {

        $resourcePath = '/batches/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchesCurrentTransactionsGet
     *
     * Retrieves transactin detail for the currently open batch.
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchTransactions
     */
    public function batchesCurrentTransactionsGet($limit = 20, $offset = 0, $return_bin = null)
    {
        list($response) = $this->batchesCurrentTransactionsGetWithHttpInfo($limit, $offset, $return_bin);
        return $response;
    }

    /**
     * Operation batchesCurrentTransactionsGetWithHttpInfo
     *
     * Retrieves transactin detail for the currently open batch.
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchTransactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesCurrentTransactionsGetWithHttpInfo($limit = 20, $offset = 0, $return_bin = null)
    {
        $request = $this->batchesCurrentTransactionsGetRequest($limit, $offset, $return_bin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchTransactions' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchTransactions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchTransactions';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchTransactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesCurrentTransactionsGetAsync
     *
     * Retrieves transactin detail for the currently open batch.
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentTransactionsGetAsync($limit = 20, $offset = 0, $return_bin = null)
    {
        return $this->batchesCurrentTransactionsGetAsyncWithHttpInfo($limit, $offset, $return_bin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesCurrentTransactionsGetAsyncWithHttpInfo
     *
     * Retrieves transactin detail for the currently open batch.
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesCurrentTransactionsGetAsyncWithHttpInfo($limit = 20, $offset = 0, $return_bin = null)
    {
        $returnType = '\USAePay\Model\BatchTransactions';
        $request = $this->batchesCurrentTransactionsGetRequest($limit, $offset, $return_bin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesCurrentTransactionsGet'
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  bool $return_bin return bin data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesCurrentTransactionsGetRequest($limit = 20, $offset = 0, $return_bin = null)
    {

        $resourcePath = '/batches/current/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($return_bin !== null) {
            $queryParams['return_bin'] = ObjectSerializer::toQueryValue($return_bin);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchesGet
     *
     * Retrieves a list of batches associated with the account
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  float $openedlt Filter the results to batches that are opened before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedgt Filter the results to batches that are opened after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedlt Filter the results to batches that are closed before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedgt Filter the results to batches that are closed after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedle Filter the results to batches that are opened before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedge Filter the results to batches that are opened after or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedle Filter the results to batches that are closed before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedge Filter the results to batches that are closed after or on this date. Date should be formatted YYYYMMDD. (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\BatchList
     */
    public function batchesGet($limit = 20, $offset = 0, $openedlt = null, $openedgt = null, $closedlt = null, $closedgt = null, $openedle = null, $openedge = null, $closedle = null, $closedge = null)
    {
        list($response) = $this->batchesGetWithHttpInfo($limit, $offset, $openedlt, $openedgt, $closedlt, $closedgt, $openedle, $openedge, $closedle, $closedge);
        return $response;
    }

    /**
     * Operation batchesGetWithHttpInfo
     *
     * Retrieves a list of batches associated with the account
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  float $openedlt Filter the results to batches that are opened before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedgt Filter the results to batches that are opened after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedlt Filter the results to batches that are closed before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedgt Filter the results to batches that are closed after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedle Filter the results to batches that are opened before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedge Filter the results to batches that are opened after or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedle Filter the results to batches that are closed before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedge Filter the results to batches that are closed after or on this date. Date should be formatted YYYYMMDD. (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\BatchList, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchesGetWithHttpInfo($limit = 20, $offset = 0, $openedlt = null, $openedgt = null, $closedlt = null, $closedgt = null, $openedle = null, $openedge = null, $closedle = null, $closedge = null)
    {
        $request = $this->batchesGetRequest($limit, $offset, $openedlt, $openedgt, $closedlt, $closedgt, $openedle, $openedge, $closedle, $closedge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\BatchList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\BatchList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\BatchList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\BatchList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchesGetAsync
     *
     * Retrieves a list of batches associated with the account
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  float $openedlt Filter the results to batches that are opened before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedgt Filter the results to batches that are opened after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedlt Filter the results to batches that are closed before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedgt Filter the results to batches that are closed after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedle Filter the results to batches that are opened before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedge Filter the results to batches that are opened after or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedle Filter the results to batches that are closed before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedge Filter the results to batches that are closed after or on this date. Date should be formatted YYYYMMDD. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesGetAsync($limit = 20, $offset = 0, $openedlt = null, $openedgt = null, $closedlt = null, $closedgt = null, $openedle = null, $openedge = null, $closedle = null, $closedge = null)
    {
        return $this->batchesGetAsyncWithHttpInfo($limit, $offset, $openedlt, $openedgt, $closedlt, $closedgt, $openedle, $openedge, $closedle, $closedge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchesGetAsyncWithHttpInfo
     *
     * Retrieves a list of batches associated with the account
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  float $openedlt Filter the results to batches that are opened before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedgt Filter the results to batches that are opened after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedlt Filter the results to batches that are closed before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedgt Filter the results to batches that are closed after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedle Filter the results to batches that are opened before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedge Filter the results to batches that are opened after or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedle Filter the results to batches that are closed before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedge Filter the results to batches that are closed after or on this date. Date should be formatted YYYYMMDD. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchesGetAsyncWithHttpInfo($limit = 20, $offset = 0, $openedlt = null, $openedgt = null, $closedlt = null, $closedgt = null, $openedle = null, $openedge = null, $closedle = null, $closedge = null)
    {
        $returnType = '\USAePay\Model\BatchList';
        $request = $this->batchesGetRequest($limit, $offset, $openedlt, $openedgt, $closedlt, $closedgt, $openedle, $openedge, $closedle, $closedge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchesGet'
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  float $openedlt Filter the results to batches that are opened before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedgt Filter the results to batches that are opened after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedlt Filter the results to batches that are closed before this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedgt Filter the results to batches that are closed after this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedle Filter the results to batches that are opened before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $openedge Filter the results to batches that are opened after or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedle Filter the results to batches that are closed before or on this date. Date should be formatted YYYYMMDD. (optional)
     * @param  float $closedge Filter the results to batches that are closed after or on this date. Date should be formatted YYYYMMDD. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchesGetRequest($limit = 20, $offset = 0, $openedlt = null, $openedgt = null, $closedlt = null, $closedgt = null, $openedle = null, $openedge = null, $closedle = null, $closedge = null)
    {

        $resourcePath = '/batches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($openedlt !== null) {
            $queryParams['openedlt'] = ObjectSerializer::toQueryValue($openedlt);
        }
        // query params
        if ($openedgt !== null) {
            $queryParams['openedgt'] = ObjectSerializer::toQueryValue($openedgt);
        }
        // query params
        if ($closedlt !== null) {
            $queryParams['closedlt'] = ObjectSerializer::toQueryValue($closedlt);
        }
        // query params
        if ($closedgt !== null) {
            $queryParams['closedgt'] = ObjectSerializer::toQueryValue($closedgt);
        }
        // query params
        if ($openedle !== null) {
            $queryParams['openedle'] = ObjectSerializer::toQueryValue($openedle);
        }
        // query params
        if ($openedge !== null) {
            $queryParams['openedge'] = ObjectSerializer::toQueryValue($openedge);
        }
        // query params
        if ($closedle !== null) {
            $queryParams['closedle'] = ObjectSerializer::toQueryValue($closedle);
        }
        // query params
        if ($closedge !== null) {
            $queryParams['closedge'] = ObjectSerializer::toQueryValue($closedge);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
