<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customers
 *
 * Endpoints for managing customers
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\RestAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use USAePay\ApiException;
use USAePay\Configuration;
use USAePay\HeaderSelector;
use USAePay\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string $billing_rule_key Specifies the billing rule you would like to delete. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete($custkey, $billing_schedule_key, $billing_rule_key)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string $billing_rule_key Specifies the billing rule you would like to delete. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteRequest($custkey, $billing_schedule_key, $billing_rule_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteAsync
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string $billing_rule_key Specifies the billing rule you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteAsync($custkey, $billing_schedule_key, $billing_rule_key)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string $billing_rule_key Specifies the billing rule you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteRequest($custkey, $billing_schedule_key, $billing_rule_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete'
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string $billing_rule_key Specifies the billing rule you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDeleteRequest($custkey, $billing_schedule_key, $billing_rule_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete'
            );
        }
        // verify the required parameter 'billing_rule_key' is set
        if ($billing_rule_key === null || (is_array($billing_rule_key) && count($billing_rule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_rule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyDelete'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}/billing_schedule_rules/{billing_rule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }
        // path params
        if ($billing_rule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_rule_key' . '}',
                ObjectSerializer::toPathValue($billing_rule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerRule
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet($custkey, $billing_schedule_key, $billing_rule_key)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetRequest($custkey, $billing_schedule_key, $billing_rule_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerRule' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerRule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerRule';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetAsync
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetAsync($custkey, $billing_schedule_key, $billing_rule_key)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetAsyncWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key)
    {
        $returnType = '\USAePay\Model\CustomerRule';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetRequest($custkey, $billing_schedule_key, $billing_rule_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGetRequest($custkey, $billing_schedule_key, $billing_rule_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet'
            );
        }
        // verify the required parameter 'billing_rule_key' is set
        if ($billing_rule_key === null || (is_array($billing_rule_key) && count($billing_rule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_rule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyGet'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}/billing_schedule_rules/{billing_rule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }
        // path params
        if ($billing_rule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_rule_key' . '}',
                ObjectSerializer::toPathValue($billing_rule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerRule $customer_rule customer_rule (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerRule
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerRule $customer_rule (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutRequest($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerRule' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerRule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerRule';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutAsync
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerRule $customer_rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutAsync($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutAsyncWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerRule $customer_rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutAsyncWithHttpInfo($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
    {
        $returnType = '\USAePay\Model\CustomerRule';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutRequest($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  string $billing_rule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerRule $customer_rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPutRequest($custkey, $billing_schedule_key, $billing_rule_key, $customer_rule)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut'
            );
        }
        // verify the required parameter 'billing_rule_key' is set
        if ($billing_rule_key === null || (is_array($billing_rule_key) && count($billing_rule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_rule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut'
            );
        }
        // verify the required parameter 'customer_rule' is set
        if ($customer_rule === null || (is_array($customer_rule) && count($customer_rule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_rule when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBillingRuleKeyPut'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}/billing_schedule_rules/{billing_rule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }
        // path params
        if ($billing_rule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_rule_key' . '}',
                ObjectSerializer::toPathValue($billing_rule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_rule)) {
            $_tempBody = $customer_rule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string[] $request_body request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete($custkey, $billing_schedule_key, $request_body)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteWithHttpInfo($custkey, $billing_schedule_key, $request_body);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteWithHttpInfo($custkey, $billing_schedule_key, $request_body)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteRequest($custkey, $billing_schedule_key, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteAsync
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteAsync($custkey, $billing_schedule_key, $request_body)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key, $request_body)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteRequest($custkey, $billing_schedule_key, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete'
     *
     * @param  string $custkey Specifies the customer you would like to delete. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to delete. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDeleteRequest($custkey, $billing_schedule_key, $request_body)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete'
            );
        }
        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesBulkDelete'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}/billing_schedule_rules/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request_body)) {
            $_tempBody = $request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGet
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerRuleList
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGet($custkey, $billing_schedule_key)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetWithHttpInfo($custkey, $billing_schedule_key);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerRuleList, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetWithHttpInfo($custkey, $billing_schedule_key)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetRequest($custkey, $billing_schedule_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerRuleList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerRuleList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerRuleList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerRuleList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetAsync
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetAsync($custkey, $billing_schedule_key)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetAsyncWithHttpInfo($custkey, $billing_schedule_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetAsyncWithHttpInfo
     *
     * Gets rules for a specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetAsyncWithHttpInfo($custkey, $billing_schedule_key)
    {
        $returnType = '\USAePay\Model\CustomerRuleList';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetRequest($custkey, $billing_schedule_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGetRequest($custkey, $billing_schedule_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGet'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyBillingScheduleRulesGet'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}/billing_schedule_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyDelete
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyDelete($custkey, $billing_schedule_key)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyDeleteWithHttpInfo($custkey, $billing_schedule_key);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyDeleteWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyDeleteWithHttpInfo($custkey, $billing_schedule_key)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyDeleteRequest($custkey, $billing_schedule_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyDeleteAsync
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyDeleteAsync($custkey, $billing_schedule_key)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyDeleteAsyncWithHttpInfo($custkey, $billing_schedule_key)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyDeleteRequest($custkey, $billing_schedule_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyDelete'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyDeleteRequest($custkey, $billing_schedule_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyDelete'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyDelete'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyGet
     *
     * Gets specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerSchedule
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyGet($custkey, $billing_schedule_key)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyGetWithHttpInfo($custkey, $billing_schedule_key);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyGetWithHttpInfo
     *
     * Gets specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyGetWithHttpInfo($custkey, $billing_schedule_key)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyGetRequest($custkey, $billing_schedule_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerSchedule' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerSchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerSchedule';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyGetAsync
     *
     * Gets specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyGetAsync($custkey, $billing_schedule_key)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyGetAsyncWithHttpInfo($custkey, $billing_schedule_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyGetAsyncWithHttpInfo
     *
     * Gets specific schedule from a customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyGetAsyncWithHttpInfo($custkey, $billing_schedule_key)
    {
        $returnType = '\USAePay\Model\CustomerSchedule';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyGetRequest($custkey, $billing_schedule_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyGetRequest($custkey, $billing_schedule_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyGet'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyGet'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyPut
     *
     * Update a customers billing schedule
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerSchedule $customer_schedule customer_schedule (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerSchedule
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyPut($custkey, $billing_schedule_key, $customer_schedule)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBillingScheduleKeyPutWithHttpInfo($custkey, $billing_schedule_key, $customer_schedule);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyPutWithHttpInfo
     *
     * Update a customers billing schedule
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerSchedule $customer_schedule (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyPutWithHttpInfo($custkey, $billing_schedule_key, $customer_schedule)
    {
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyPutRequest($custkey, $billing_schedule_key, $customer_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerSchedule' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerSchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerSchedule';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyPutAsync
     *
     * Update a customers billing schedule
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerSchedule $customer_schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyPutAsync($custkey, $billing_schedule_key, $customer_schedule)
    {
        return $this->customersCustkeyBillingSchedulesBillingScheduleKeyPutAsyncWithHttpInfo($custkey, $billing_schedule_key, $customer_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBillingScheduleKeyPutAsyncWithHttpInfo
     *
     * Update a customers billing schedule
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerSchedule $customer_schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBillingScheduleKeyPutAsyncWithHttpInfo($custkey, $billing_schedule_key, $customer_schedule)
    {
        $returnType = '\USAePay\Model\CustomerSchedule';
        $request = $this->customersCustkeyBillingSchedulesBillingScheduleKeyPutRequest($custkey, $billing_schedule_key, $customer_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBillingScheduleKeyPut'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  string $billing_schedule_key Specifies the schedule you would like to retrieve. (required)
     * @param  \USAePay\Model\CustomerSchedule $customer_schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBillingScheduleKeyPutRequest($custkey, $billing_schedule_key, $customer_schedule)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBillingScheduleKeyPut'
            );
        }
        // verify the required parameter 'billing_schedule_key' is set
        if ($billing_schedule_key === null || (is_array($billing_schedule_key) && count($billing_schedule_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_schedule_key when calling customersCustkeyBillingSchedulesBillingScheduleKeyPut'
            );
        }
        // verify the required parameter 'customer_schedule' is set
        if ($customer_schedule === null || (is_array($customer_schedule) && count($customer_schedule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_schedule when calling customersCustkeyBillingSchedulesBillingScheduleKeyPut'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/{billing_schedule_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($billing_schedule_key !== null) {
            $resourcePath = str_replace(
                '{' . 'billing_schedule_key' . '}',
                ObjectSerializer::toPathValue($billing_schedule_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_schedule)) {
            $_tempBody = $customer_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBulkDelete
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string[] $request_body request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyBillingSchedulesBulkDelete($custkey, $request_body)
    {
        list($response) = $this->customersCustkeyBillingSchedulesBulkDeleteWithHttpInfo($custkey, $request_body);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesBulkDeleteWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesBulkDeleteWithHttpInfo($custkey, $request_body)
    {
        $request = $this->customersCustkeyBillingSchedulesBulkDeleteRequest($custkey, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesBulkDeleteAsync
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBulkDeleteAsync($custkey, $request_body)
    {
        return $this->customersCustkeyBillingSchedulesBulkDeleteAsyncWithHttpInfo($custkey, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesBulkDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesBulkDeleteAsyncWithHttpInfo($custkey, $request_body)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyBillingSchedulesBulkDeleteRequest($custkey, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesBulkDelete'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  string[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesBulkDeleteRequest($custkey, $request_body)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesBulkDelete'
            );
        }
        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling customersCustkeyBillingSchedulesBulkDelete'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request_body)) {
            $_tempBody = $request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesGet
     *
     * Gets customers billing schedules
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerScheduleList
     */
    public function customersCustkeyBillingSchedulesGet($custkey)
    {
        list($response) = $this->customersCustkeyBillingSchedulesGetWithHttpInfo($custkey);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesGetWithHttpInfo
     *
     * Gets customers billing schedules
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerScheduleList, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesGetWithHttpInfo($custkey)
    {
        $request = $this->customersCustkeyBillingSchedulesGetRequest($custkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerScheduleList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerScheduleList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerScheduleList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerScheduleList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesGetAsync
     *
     * Gets customers billing schedules
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesGetAsync($custkey)
    {
        return $this->customersCustkeyBillingSchedulesGetAsyncWithHttpInfo($custkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesGetAsyncWithHttpInfo
     *
     * Gets customers billing schedules
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesGetAsyncWithHttpInfo($custkey)
    {
        $returnType = '\USAePay\Model\CustomerScheduleList';
        $request = $this->customersCustkeyBillingSchedulesGetRequest($custkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesGetRequest($custkey)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesGet'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyBillingSchedulesPost
     *
     * Add billing schedules to customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  \USAePay\Model\CustomerSchedule[] $request_body request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerSchedule[]
     */
    public function customersCustkeyBillingSchedulesPost($custkey, $request_body)
    {
        list($response) = $this->customersCustkeyBillingSchedulesPostWithHttpInfo($custkey, $request_body);
        return $response;
    }

    /**
     * Operation customersCustkeyBillingSchedulesPostWithHttpInfo
     *
     * Add billing schedules to customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  \USAePay\Model\CustomerSchedule[] $request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerSchedule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyBillingSchedulesPostWithHttpInfo($custkey, $request_body)
    {
        $request = $this->customersCustkeyBillingSchedulesPostRequest($custkey, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerSchedule[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerSchedule[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerSchedule[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerSchedule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyBillingSchedulesPostAsync
     *
     * Add billing schedules to customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  \USAePay\Model\CustomerSchedule[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesPostAsync($custkey, $request_body)
    {
        return $this->customersCustkeyBillingSchedulesPostAsyncWithHttpInfo($custkey, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyBillingSchedulesPostAsyncWithHttpInfo
     *
     * Add billing schedules to customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  \USAePay\Model\CustomerSchedule[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyBillingSchedulesPostAsyncWithHttpInfo($custkey, $request_body)
    {
        $returnType = '\USAePay\Model\CustomerSchedule[]';
        $request = $this->customersCustkeyBillingSchedulesPostRequest($custkey, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyBillingSchedulesPost'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve schedules from. (required)
     * @param  \USAePay\Model\CustomerSchedule[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyBillingSchedulesPostRequest($custkey, $request_body)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyBillingSchedulesPost'
            );
        }
        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling customersCustkeyBillingSchedulesPost'
            );
        }

        $resourcePath = '/customers/{custkey}/billing_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request_body)) {
            $_tempBody = $request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyDelete
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyDelete($custkey)
    {
        list($response) = $this->customersCustkeyDeleteWithHttpInfo($custkey);
        return $response;
    }

    /**
     * Operation customersCustkeyDeleteWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyDeleteWithHttpInfo($custkey)
    {
        $request = $this->customersCustkeyDeleteRequest($custkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyDeleteAsync
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyDeleteAsync($custkey)
    {
        return $this->customersCustkeyDeleteAsyncWithHttpInfo($custkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyDeleteAsyncWithHttpInfo($custkey)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyDeleteRequest($custkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyDelete'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyDeleteRequest($custkey)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyDelete'
            );
        }

        $resourcePath = '/customers/{custkey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyGet
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Customer
     */
    public function customersCustkeyGet($custkey)
    {
        list($response) = $this->customersCustkeyGetWithHttpInfo($custkey);
        return $response;
    }

    /**
     * Operation customersCustkeyGetWithHttpInfo
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyGetWithHttpInfo($custkey)
    {
        $request = $this->customersCustkeyGetRequest($custkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Customer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Customer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyGetAsync
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyGetAsync($custkey)
    {
        return $this->customersCustkeyGetAsyncWithHttpInfo($custkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyGetAsyncWithHttpInfo
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyGetAsyncWithHttpInfo($custkey)
    {
        $returnType = '\USAePay\Model\Customer';
        $request = $this->customersCustkeyGetRequest($custkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyGetRequest($custkey)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyGet'
            );
        }

        $resourcePath = '/customers/{custkey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPaymentMethodsGet
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment methods from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerPaymentMethodList
     */
    public function customersCustkeyPaymentMethodsGet($custkey)
    {
        list($response) = $this->customersCustkeyPaymentMethodsGetWithHttpInfo($custkey);
        return $response;
    }

    /**
     * Operation customersCustkeyPaymentMethodsGetWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment methods from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerPaymentMethodList, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPaymentMethodsGetWithHttpInfo($custkey)
    {
        $request = $this->customersCustkeyPaymentMethodsGetRequest($custkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerPaymentMethodList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerPaymentMethodList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerPaymentMethodList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerPaymentMethodList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPaymentMethodsGetAsync
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment methods from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsGetAsync($custkey)
    {
        return $this->customersCustkeyPaymentMethodsGetAsyncWithHttpInfo($custkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPaymentMethodsGetAsyncWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment methods from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsGetAsyncWithHttpInfo($custkey)
    {
        $returnType = '\USAePay\Model\CustomerPaymentMethodList';
        $request = $this->customersCustkeyPaymentMethodsGetRequest($custkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPaymentMethodsGet'
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment methods from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPaymentMethodsGetRequest($custkey)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPaymentMethodsGet'
            );
        }

        $resourcePath = '/customers/{custkey}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyDelete
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to delete. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyDelete($custkey, $paymethod_key)
    {
        list($response) = $this->customersCustkeyPaymentMethodsPaymethodKeyDeleteWithHttpInfo($custkey, $paymethod_key);
        return $response;
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyDeleteWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to delete. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyDeleteWithHttpInfo($custkey, $paymethod_key)
    {
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyDeleteRequest($custkey, $paymethod_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyDeleteAsync
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyDeleteAsync($custkey, $paymethod_key)
    {
        return $this->customersCustkeyPaymentMethodsPaymethodKeyDeleteAsyncWithHttpInfo($custkey, $paymethod_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyDeleteAsyncWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to delete payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyDeleteAsyncWithHttpInfo($custkey, $paymethod_key)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyDeleteRequest($custkey, $paymethod_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPaymentMethodsPaymethodKeyDelete'
     *
     * @param  string $custkey Specifies the customer you would like to delete payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPaymentMethodsPaymethodKeyDeleteRequest($custkey, $paymethod_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPaymentMethodsPaymethodKeyDelete'
            );
        }
        // verify the required parameter 'paymethod_key' is set
        if ($paymethod_key === null || (is_array($paymethod_key) && count($paymethod_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymethod_key when calling customersCustkeyPaymentMethodsPaymethodKeyDelete'
            );
        }

        $resourcePath = '/customers/{custkey}/payment_methods/{paymethod_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($paymethod_key !== null) {
            $resourcePath = str_replace(
                '{' . 'paymethod_key' . '}',
                ObjectSerializer::toPathValue($paymethod_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyGet
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to retreive  . (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerPaymentMethod
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyGet($custkey, $paymethod_key)
    {
        list($response) = $this->customersCustkeyPaymentMethodsPaymethodKeyGetWithHttpInfo($custkey, $paymethod_key);
        return $response;
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyGetWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to retreive  . (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerPaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyGetWithHttpInfo($custkey, $paymethod_key)
    {
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyGetRequest($custkey, $paymethod_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerPaymentMethod' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerPaymentMethod';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyGetAsync
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to retreive  . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyGetAsync($custkey, $paymethod_key)
    {
        return $this->customersCustkeyPaymentMethodsPaymethodKeyGetAsyncWithHttpInfo($custkey, $paymethod_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyGetAsyncWithHttpInfo
     *
     * Delete a existing customer billing rule
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to retreive  . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyGetAsyncWithHttpInfo($custkey, $paymethod_key)
    {
        $returnType = '\USAePay\Model\CustomerPaymentMethod';
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyGetRequest($custkey, $paymethod_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPaymentMethodsPaymethodKeyGet'
     *
     * @param  string $custkey Specifies the customer you would like to retreive payment method from. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to retreive  . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPaymentMethodsPaymethodKeyGetRequest($custkey, $paymethod_key)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPaymentMethodsPaymethodKeyGet'
            );
        }
        // verify the required parameter 'paymethod_key' is set
        if ($paymethod_key === null || (is_array($paymethod_key) && count($paymethod_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymethod_key when calling customersCustkeyPaymentMethodsPaymethodKeyGet'
            );
        }

        $resourcePath = '/customers/{custkey}/payment_methods/{paymethod_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($paymethod_key !== null) {
            $resourcePath = str_replace(
                '{' . 'paymethod_key' . '}',
                ObjectSerializer::toPathValue($paymethod_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyPost
     *
     * Update an existing customer payment method
     *
     * @param  string $custkey Specifies the customer you would like to update a payment method in. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to update. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod $customer_payment_method customer_payment_method (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerPaymentMethod
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyPost($custkey, $paymethod_key, $customer_payment_method)
    {
        list($response) = $this->customersCustkeyPaymentMethodsPaymethodKeyPostWithHttpInfo($custkey, $paymethod_key, $customer_payment_method);
        return $response;
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyPostWithHttpInfo
     *
     * Update an existing customer payment method
     *
     * @param  string $custkey Specifies the customer you would like to update a payment method in. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to update. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod $customer_payment_method (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerPaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyPostWithHttpInfo($custkey, $paymethod_key, $customer_payment_method)
    {
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyPostRequest($custkey, $paymethod_key, $customer_payment_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerPaymentMethod' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerPaymentMethod';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyPostAsync
     *
     * Update an existing customer payment method
     *
     * @param  string $custkey Specifies the customer you would like to update a payment method in. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to update. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod $customer_payment_method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyPostAsync($custkey, $paymethod_key, $customer_payment_method)
    {
        return $this->customersCustkeyPaymentMethodsPaymethodKeyPostAsyncWithHttpInfo($custkey, $paymethod_key, $customer_payment_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPaymethodKeyPostAsyncWithHttpInfo
     *
     * Update an existing customer payment method
     *
     * @param  string $custkey Specifies the customer you would like to update a payment method in. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to update. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod $customer_payment_method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPaymethodKeyPostAsyncWithHttpInfo($custkey, $paymethod_key, $customer_payment_method)
    {
        $returnType = '\USAePay\Model\CustomerPaymentMethod';
        $request = $this->customersCustkeyPaymentMethodsPaymethodKeyPostRequest($custkey, $paymethod_key, $customer_payment_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPaymentMethodsPaymethodKeyPost'
     *
     * @param  string $custkey Specifies the customer you would like to update a payment method in. (required)
     * @param  string $paymethod_key Specifies the Payment method you would like to update. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod $customer_payment_method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPaymentMethodsPaymethodKeyPostRequest($custkey, $paymethod_key, $customer_payment_method)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPaymentMethodsPaymethodKeyPost'
            );
        }
        // verify the required parameter 'paymethod_key' is set
        if ($paymethod_key === null || (is_array($paymethod_key) && count($paymethod_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymethod_key when calling customersCustkeyPaymentMethodsPaymethodKeyPost'
            );
        }
        // verify the required parameter 'customer_payment_method' is set
        if ($customer_payment_method === null || (is_array($customer_payment_method) && count($customer_payment_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_payment_method when calling customersCustkeyPaymentMethodsPaymethodKeyPost'
            );
        }

        $resourcePath = '/customers/{custkey}/payment_methods/{paymethod_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }
        // path params
        if ($paymethod_key !== null) {
            $resourcePath = str_replace(
                '{' . 'paymethod_key' . '}',
                ObjectSerializer::toPathValue($paymethod_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_payment_method)) {
            $_tempBody = $customer_payment_method;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPost
     *
     * Add an array of new payment methods to an existing customer
     *
     * @param  string $custkey Specifies the customer you would like to add a payment method to. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod[] $request_body request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerPaymentMethod
     */
    public function customersCustkeyPaymentMethodsPost($custkey, $request_body)
    {
        list($response) = $this->customersCustkeyPaymentMethodsPostWithHttpInfo($custkey, $request_body);
        return $response;
    }

    /**
     * Operation customersCustkeyPaymentMethodsPostWithHttpInfo
     *
     * Add an array of new payment methods to an existing customer
     *
     * @param  string $custkey Specifies the customer you would like to add a payment method to. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod[] $request_body (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerPaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPaymentMethodsPostWithHttpInfo($custkey, $request_body)
    {
        $request = $this->customersCustkeyPaymentMethodsPostRequest($custkey, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerPaymentMethod' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerPaymentMethod';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPaymentMethodsPostAsync
     *
     * Add an array of new payment methods to an existing customer
     *
     * @param  string $custkey Specifies the customer you would like to add a payment method to. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPostAsync($custkey, $request_body)
    {
        return $this->customersCustkeyPaymentMethodsPostAsyncWithHttpInfo($custkey, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPaymentMethodsPostAsyncWithHttpInfo
     *
     * Add an array of new payment methods to an existing customer
     *
     * @param  string $custkey Specifies the customer you would like to add a payment method to. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPaymentMethodsPostAsyncWithHttpInfo($custkey, $request_body)
    {
        $returnType = '\USAePay\Model\CustomerPaymentMethod';
        $request = $this->customersCustkeyPaymentMethodsPostRequest($custkey, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPaymentMethodsPost'
     *
     * @param  string $custkey Specifies the customer you would like to add a payment method to. (required)
     * @param  \USAePay\Model\CustomerPaymentMethod[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPaymentMethodsPostRequest($custkey, $request_body)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPaymentMethodsPost'
            );
        }
        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling customersCustkeyPaymentMethodsPost'
            );
        }

        $resourcePath = '/customers/{custkey}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request_body)) {
            $_tempBody = $request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyPut
     *
     * Updates a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  \USAePay\Model\Customer $customer customer (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Customer
     */
    public function customersCustkeyPut($custkey, $customer)
    {
        list($response) = $this->customersCustkeyPutWithHttpInfo($custkey, $customer);
        return $response;
    }

    /**
     * Operation customersCustkeyPutWithHttpInfo
     *
     * Updates a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  \USAePay\Model\Customer $customer (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyPutWithHttpInfo($custkey, $customer)
    {
        $request = $this->customersCustkeyPutRequest($custkey, $customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Customer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Customer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyPutAsync
     *
     * Updates a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  \USAePay\Model\Customer $customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPutAsync($custkey, $customer)
    {
        return $this->customersCustkeyPutAsyncWithHttpInfo($custkey, $customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyPutAsyncWithHttpInfo
     *
     * Updates a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  \USAePay\Model\Customer $customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyPutAsyncWithHttpInfo($custkey, $customer)
    {
        $returnType = '\USAePay\Model\Customer';
        $request = $this->customersCustkeyPutRequest($custkey, $customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyPut'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve. (required)
     * @param  \USAePay\Model\Customer $customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyPutRequest($custkey, $customer)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyPut'
            );
        }
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling customersCustkeyPut'
            );
        }

        $resourcePath = '/customers/{custkey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersCustkeyTransactionsGet
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve transaction history from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\TransactionList
     */
    public function customersCustkeyTransactionsGet($custkey)
    {
        list($response) = $this->customersCustkeyTransactionsGetWithHttpInfo($custkey);
        return $response;
    }

    /**
     * Operation customersCustkeyTransactionsGetWithHttpInfo
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve transaction history from. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\TransactionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustkeyTransactionsGetWithHttpInfo($custkey)
    {
        $request = $this->customersCustkeyTransactionsGetRequest($custkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\TransactionList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\TransactionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\TransactionList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\TransactionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersCustkeyTransactionsGetAsync
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve transaction history from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyTransactionsGetAsync($custkey)
    {
        return $this->customersCustkeyTransactionsGetAsyncWithHttpInfo($custkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersCustkeyTransactionsGetAsyncWithHttpInfo
     *
     * Retrieve a existing customer
     *
     * @param  string $custkey Specifies the customer you would like to retrieve transaction history from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersCustkeyTransactionsGetAsyncWithHttpInfo($custkey)
    {
        $returnType = '\USAePay\Model\TransactionList';
        $request = $this->customersCustkeyTransactionsGetRequest($custkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersCustkeyTransactionsGet'
     *
     * @param  string $custkey Specifies the customer you would like to retrieve transaction history from. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersCustkeyTransactionsGetRequest($custkey)
    {
        // verify the required parameter 'custkey' is set
        if ($custkey === null || (is_array($custkey) && count($custkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custkey when calling customersCustkeyTransactionsGet'
            );
        }

        $resourcePath = '/customers/{custkey}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($custkey !== null) {
            $resourcePath = str_replace(
                '{' . 'custkey' . '}',
                ObjectSerializer::toPathValue($custkey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersDisablePost
     *
     * Disable a customer.
     *
     * @param  \USAePay\Model\Key $key key (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersDisablePost($key)
    {
        list($response) = $this->customersDisablePostWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation customersDisablePostWithHttpInfo
     *
     * Disable a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersDisablePostWithHttpInfo($key)
    {
        $request = $this->customersDisablePostRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersDisablePostAsync
     *
     * Disable a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDisablePostAsync($key)
    {
        return $this->customersDisablePostAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersDisablePostAsyncWithHttpInfo
     *
     * Disable a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersDisablePostAsyncWithHttpInfo($key)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersDisablePostRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersDisablePost'
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersDisablePostRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling customersDisablePost'
            );
        }

        $resourcePath = '/customers/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($key)) {
            $_tempBody = $key;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersEnablePost
     *
     * Enables a customer.
     *
     * @param  \USAePay\Model\Key $key key (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function customersEnablePost($key)
    {
        list($response) = $this->customersEnablePostWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation customersEnablePostWithHttpInfo
     *
     * Enables a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersEnablePostWithHttpInfo($key)
    {
        $request = $this->customersEnablePostRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersEnablePostAsync
     *
     * Enables a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersEnablePostAsync($key)
    {
        return $this->customersEnablePostAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersEnablePostAsyncWithHttpInfo
     *
     * Enables a customer.
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersEnablePostAsyncWithHttpInfo($key)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->customersEnablePostRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersEnablePost'
     *
     * @param  \USAePay\Model\Key $key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersEnablePostRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling customersEnablePost'
            );
        }

        $resourcePath = '/customers/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($key)) {
            $_tempBody = $key;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersGet
     *
     * Gets a list of your customers
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\CustomerList
     */
    public function customersGet()
    {
        list($response) = $this->customersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation customersGetWithHttpInfo
     *
     * Gets a list of your customers
     *
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\CustomerList, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersGetWithHttpInfo()
    {
        $request = $this->customersGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\CustomerList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\CustomerList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\CustomerList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\CustomerList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersGetAsync
     *
     * Gets a list of your customers
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsync()
    {
        return $this->customersGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersGetAsyncWithHttpInfo
     *
     * Gets a list of your customers
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsyncWithHttpInfo()
    {
        $returnType = '\USAePay\Model\CustomerList';
        $request = $this->customersGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersGetRequest()
    {

        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersPost
     *
     * Save a customer to your customer database
     *
     * @param  \USAePay\Model\CustomerRequest $customer_request customer_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Customer
     */
    public function customersPost($customer_request)
    {
        list($response) = $this->customersPostWithHttpInfo($customer_request);
        return $response;
    }

    /**
     * Operation customersPostWithHttpInfo
     *
     * Save a customer to your customer database
     *
     * @param  \USAePay\Model\CustomerRequest $customer_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersPostWithHttpInfo($customer_request)
    {
        $request = $this->customersPostRequest($customer_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Customer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Customer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersPostAsync
     *
     * Save a customer to your customer database
     *
     * @param  \USAePay\Model\CustomerRequest $customer_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersPostAsync($customer_request)
    {
        return $this->customersPostAsyncWithHttpInfo($customer_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersPostAsyncWithHttpInfo
     *
     * Save a customer to your customer database
     *
     * @param  \USAePay\Model\CustomerRequest $customer_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersPostAsyncWithHttpInfo($customer_request)
    {
        $returnType = '\USAePay\Model\Customer';
        $request = $this->customersPostRequest($customer_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersPost'
     *
     * @param  \USAePay\Model\CustomerRequest $customer_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersPostRequest($customer_request)
    {
        // verify the required parameter 'customer_request' is set
        if ($customer_request === null || (is_array($customer_request) && count($customer_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_request when calling customersPost'
            );
        }

        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($customer_request)) {
            $_tempBody = $customer_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
