<?php
/**
 * TransactionApi
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\RestAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use USAePay\ApiException;
use USAePay\Configuration;
use USAePay\HeaderSelector;
use USAePay\ObjectSerializer;

/**
 * TransactionApi Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation transactionsGet
     *
     * Gets a list of transactions
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  string $fuzzy Allows for fuzzy filters (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\TransactionList
     */
    public function transactionsGet($limit = 20, $offset = 0, $fuzzy = null)
    {
        list($response) = $this->transactionsGetWithHttpInfo($limit, $offset, $fuzzy);
        return $response;
    }

    /**
     * Operation transactionsGetWithHttpInfo
     *
     * Gets a list of transactions
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  string $fuzzy Allows for fuzzy filters (optional)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\TransactionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetWithHttpInfo($limit = 20, $offset = 0, $fuzzy = null)
    {
        $request = $this->transactionsGetRequest($limit, $offset, $fuzzy);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\TransactionList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\TransactionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\TransactionList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\TransactionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGetAsync
     *
     * Gets a list of transactions
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  string $fuzzy Allows for fuzzy filters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsync($limit = 20, $offset = 0, $fuzzy = null)
    {
        return $this->transactionsGetAsyncWithHttpInfo($limit, $offset, $fuzzy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetAsyncWithHttpInfo
     *
     * Gets a list of transactions
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  string $fuzzy Allows for fuzzy filters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsyncWithHttpInfo($limit = 20, $offset = 0, $fuzzy = null)
    {
        $returnType = '\USAePay\Model\TransactionList';
        $request = $this->transactionsGetRequest($limit, $offset, $fuzzy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGet'
     *
     * @param  int $limit Max number of batches to return (optional, default to 20)
     * @param  int $offset Offset before returning batch profiles (optional, default to 0)
     * @param  string $fuzzy Allows for fuzzy filters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionsGetRequest($limit = 20, $offset = 0, $fuzzy = null)
    {

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($fuzzy !== null) {
            $queryParams['fuzzy'] = ObjectSerializer::toQueryValue($fuzzy);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsPost
     *
     * Run a transaction
     *
     * @param  \USAePay\Model\TransactionRequest $transaction_request transaction_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Transaction
     */
    public function transactionsPost($transaction_request)
    {
        list($response) = $this->transactionsPostWithHttpInfo($transaction_request);
        return $response;
    }

    /**
     * Operation transactionsPostWithHttpInfo
     *
     * Run a transaction
     *
     * @param  \USAePay\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsPostWithHttpInfo($transaction_request)
    {
        $request = $this->transactionsPostRequest($transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Transaction' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Transaction';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsPostAsync
     *
     * Run a transaction
     *
     * @param  \USAePay\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsync($transaction_request)
    {
        return $this->transactionsPostAsyncWithHttpInfo($transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsPostAsyncWithHttpInfo
     *
     * Run a transaction
     *
     * @param  \USAePay\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsyncWithHttpInfo($transaction_request)
    {
        $returnType = '\USAePay\Model\Transaction';
        $request = $this->transactionsPostRequest($transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsPost'
     *
     * @param  \USAePay\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionsPostRequest($transaction_request)
    {
        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling transactionsPost'
            );
        }

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_request)) {
            $_tempBody = $transaction_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTrankeyGet
     *
     * Retrieve a specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Transaction
     */
    public function transactionsTrankeyGet($trankey)
    {
        list($response) = $this->transactionsTrankeyGetWithHttpInfo($trankey);
        return $response;
    }

    /**
     * Operation transactionsTrankeyGetWithHttpInfo
     *
     * Retrieve a specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to retrieve. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTrankeyGetWithHttpInfo($trankey)
    {
        $request = $this->transactionsTrankeyGetRequest($trankey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Transaction' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Transaction';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsTrankeyGetAsync
     *
     * Retrieve a specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeyGetAsync($trankey)
    {
        return $this->transactionsTrankeyGetAsyncWithHttpInfo($trankey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTrankeyGetAsyncWithHttpInfo
     *
     * Retrieve a specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeyGetAsyncWithHttpInfo($trankey)
    {
        $returnType = '\USAePay\Model\Transaction';
        $request = $this->transactionsTrankeyGetRequest($trankey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTrankeyGet'
     *
     * @param  string $trankey Specifies the transaction you would like to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionsTrankeyGetRequest($trankey)
    {
        // verify the required parameter 'trankey' is set
        if ($trankey === null || (is_array($trankey) && count($trankey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trankey when calling transactionsTrankeyGet'
            );
        }

        $resourcePath = '/transactions/{trankey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trankey !== null) {
            $resourcePath = str_replace(
                '{' . 'trankey' . '}',
                ObjectSerializer::toPathValue($trankey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTrankeyReceiptsReceiptKeyGet
     *
     * Retrieve receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to get the reciept for. (required)
     * @param  string $receipt_key Specifies the receipt template you would like to apply to the transaction. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function transactionsTrankeyReceiptsReceiptKeyGet($trankey, $receipt_key)
    {
        list($response) = $this->transactionsTrankeyReceiptsReceiptKeyGetWithHttpInfo($trankey, $receipt_key);
        return $response;
    }

    /**
     * Operation transactionsTrankeyReceiptsReceiptKeyGetWithHttpInfo
     *
     * Retrieve receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to get the reciept for. (required)
     * @param  string $receipt_key Specifies the receipt template you would like to apply to the transaction. (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTrankeyReceiptsReceiptKeyGetWithHttpInfo($trankey, $receipt_key)
    {
        $request = $this->transactionsTrankeyReceiptsReceiptKeyGetRequest($trankey, $receipt_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsTrankeyReceiptsReceiptKeyGetAsync
     *
     * Retrieve receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to get the reciept for. (required)
     * @param  string $receipt_key Specifies the receipt template you would like to apply to the transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeyReceiptsReceiptKeyGetAsync($trankey, $receipt_key)
    {
        return $this->transactionsTrankeyReceiptsReceiptKeyGetAsyncWithHttpInfo($trankey, $receipt_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTrankeyReceiptsReceiptKeyGetAsyncWithHttpInfo
     *
     * Retrieve receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to get the reciept for. (required)
     * @param  string $receipt_key Specifies the receipt template you would like to apply to the transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeyReceiptsReceiptKeyGetAsyncWithHttpInfo($trankey, $receipt_key)
    {
        $returnType = 'string';
        $request = $this->transactionsTrankeyReceiptsReceiptKeyGetRequest($trankey, $receipt_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTrankeyReceiptsReceiptKeyGet'
     *
     * @param  string $trankey Specifies the transaction you would like to get the reciept for. (required)
     * @param  string $receipt_key Specifies the receipt template you would like to apply to the transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionsTrankeyReceiptsReceiptKeyGetRequest($trankey, $receipt_key)
    {
        // verify the required parameter 'trankey' is set
        if ($trankey === null || (is_array($trankey) && count($trankey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trankey when calling transactionsTrankeyReceiptsReceiptKeyGet'
            );
        }
        // verify the required parameter 'receipt_key' is set
        if ($receipt_key === null || (is_array($receipt_key) && count($receipt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receipt_key when calling transactionsTrankeyReceiptsReceiptKeyGet'
            );
        }

        $resourcePath = '/transactions/{trankey}/receipts/{receipt_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trankey !== null) {
            $resourcePath = str_replace(
                '{' . 'trankey' . '}',
                ObjectSerializer::toPathValue($trankey),
                $resourcePath
            );
        }
        // path params
        if ($receipt_key !== null) {
            $resourcePath = str_replace(
                '{' . 'receipt_key' . '}',
                ObjectSerializer::toPathValue($receipt_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTrankeySendPost
     *
     * Email receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to send the reciept for. (required)
     * @param  \USAePay\Model\SendReceiptRequest $send_receipt_request send_receipt_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \USAePay\Model\Status
     */
    public function transactionsTrankeySendPost($trankey, $send_receipt_request)
    {
        list($response) = $this->transactionsTrankeySendPostWithHttpInfo($trankey, $send_receipt_request);
        return $response;
    }

    /**
     * Operation transactionsTrankeySendPostWithHttpInfo
     *
     * Email receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to send the reciept for. (required)
     * @param  \USAePay\Model\SendReceiptRequest $send_receipt_request (required)
     *
     * @throws \USAePay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \USAePay\Model\Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTrankeySendPostWithHttpInfo($trankey, $send_receipt_request)
    {
        $request = $this->transactionsTrankeySendPostRequest($trankey, $send_receipt_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\USAePay\Model\Status' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\USAePay\Model\Status', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\USAePay\Model\Status';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\USAePay\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsTrankeySendPostAsync
     *
     * Email receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to send the reciept for. (required)
     * @param  \USAePay\Model\SendReceiptRequest $send_receipt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeySendPostAsync($trankey, $send_receipt_request)
    {
        return $this->transactionsTrankeySendPostAsyncWithHttpInfo($trankey, $send_receipt_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTrankeySendPostAsyncWithHttpInfo
     *
     * Email receipt for specific transaction.
     *
     * @param  string $trankey Specifies the transaction you would like to send the reciept for. (required)
     * @param  \USAePay\Model\SendReceiptRequest $send_receipt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTrankeySendPostAsyncWithHttpInfo($trankey, $send_receipt_request)
    {
        $returnType = '\USAePay\Model\Status';
        $request = $this->transactionsTrankeySendPostRequest($trankey, $send_receipt_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTrankeySendPost'
     *
     * @param  string $trankey Specifies the transaction you would like to send the reciept for. (required)
     * @param  \USAePay\Model\SendReceiptRequest $send_receipt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionsTrankeySendPostRequest($trankey, $send_receipt_request)
    {
        // verify the required parameter 'trankey' is set
        if ($trankey === null || (is_array($trankey) && count($trankey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trankey when calling transactionsTrankeySendPost'
            );
        }
        // verify the required parameter 'send_receipt_request' is set
        if ($send_receipt_request === null || (is_array($send_receipt_request) && count($send_receipt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_receipt_request when calling transactionsTrankeySendPost'
            );
        }

        $resourcePath = '/transactions/{trankey}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trankey !== null) {
            $resourcePath = str_replace(
                '{' . 'trankey' . '}',
                ObjectSerializer::toPathValue($trankey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($send_receipt_request)) {
            $_tempBody = $send_receipt_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
