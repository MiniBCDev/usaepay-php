<?php
/**
 * LineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_key' => 'string',
        'name' => 'string',
        'description' => 'string',
        'size' => 'string',
        'color' => 'string',
        'cost' => 'double',
        'list_price' => 'double',
        'qty' => 'string',
        'sku' => 'string',
        'commoditycode' => 'string',
        'discountamount' => 'string',
        'discountrate' => 'string',
        'taxable' => 'string',
        'taxamount' => 'string',
        'taxclass' => 'string',
        'taxrate' => 'string',
        'um' => 'string',
        'category' => 'string',
        'location_key' => 'string',
        'manufacturer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'product_key' => null,
        'name' => null,
        'description' => null,
        'size' => null,
        'color' => null,
        'cost' => 'double',
        'list_price' => 'double',
        'qty' => null,
        'sku' => null,
        'commoditycode' => null,
        'discountamount' => null,
        'discountrate' => null,
        'taxable' => null,
        'taxamount' => null,
        'taxclass' => null,
        'taxrate' => null,
        'um' => null,
        'category' => null,
        'location_key' => null,
        'manufacturer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_key' => 'product_key',
        'name' => 'name',
        'description' => 'description',
        'size' => 'size',
        'color' => 'color',
        'cost' => 'cost',
        'list_price' => 'list_price',
        'qty' => 'qty',
        'sku' => 'sku',
        'commoditycode' => 'commoditycode',
        'discountamount' => 'discountamount',
        'discountrate' => 'discountrate',
        'taxable' => 'taxable',
        'taxamount' => 'taxamount',
        'taxclass' => 'taxclass',
        'taxrate' => 'taxrate',
        'um' => 'um',
        'category' => 'category',
        'location_key' => 'location_key',
        'manufacturer' => 'manufacturer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_key' => 'setProductKey',
        'name' => 'setName',
        'description' => 'setDescription',
        'size' => 'setSize',
        'color' => 'setColor',
        'cost' => 'setCost',
        'list_price' => 'setListPrice',
        'qty' => 'setQty',
        'sku' => 'setSku',
        'commoditycode' => 'setCommoditycode',
        'discountamount' => 'setDiscountamount',
        'discountrate' => 'setDiscountrate',
        'taxable' => 'setTaxable',
        'taxamount' => 'setTaxamount',
        'taxclass' => 'setTaxclass',
        'taxrate' => 'setTaxrate',
        'um' => 'setUm',
        'category' => 'setCategory',
        'location_key' => 'setLocationKey',
        'manufacturer' => 'setManufacturer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_key' => 'getProductKey',
        'name' => 'getName',
        'description' => 'getDescription',
        'size' => 'getSize',
        'color' => 'getColor',
        'cost' => 'getCost',
        'list_price' => 'getListPrice',
        'qty' => 'getQty',
        'sku' => 'getSku',
        'commoditycode' => 'getCommoditycode',
        'discountamount' => 'getDiscountamount',
        'discountrate' => 'getDiscountrate',
        'taxable' => 'getTaxable',
        'taxamount' => 'getTaxamount',
        'taxclass' => 'getTaxclass',
        'taxrate' => 'getTaxrate',
        'um' => 'getUm',
        'category' => 'getCategory',
        'location_key' => 'getLocationKey',
        'manufacturer' => 'getManufacturer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_key'] = isset($data['product_key']) ? $data['product_key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['commoditycode'] = isset($data['commoditycode']) ? $data['commoditycode'] : null;
        $this->container['discountamount'] = isset($data['discountamount']) ? $data['discountamount'] : null;
        $this->container['discountrate'] = isset($data['discountrate']) ? $data['discountrate'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : 'false';
        $this->container['taxamount'] = isset($data['taxamount']) ? $data['taxamount'] : null;
        $this->container['taxclass'] = isset($data['taxclass']) ? $data['taxclass'] : null;
        $this->container['taxrate'] = isset($data['taxrate']) ? $data['taxrate'] : null;
        $this->container['um'] = isset($data['um']) ? $data['um'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['location_key'] = isset($data['location_key']) ? $data['location_key'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_key
     *
     * @return string|null
     */
    public function getProductKey()
    {
        return $this->container['product_key'];
    }

    /**
     * Sets product_key
     *
     * @param string|null $product_key Gateway generated unique product identifier. Will only be included if the line item is a product from the database.
     *
     * @return $this
     */
    public function setProductKey($product_key)
    {
        $this->container['product_key'] = $product_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of line item
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for line item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Description for line item
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Description for line item
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double|null $cost Price of line item
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return double|null
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param double|null $list_price Original listed price of item
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string|null
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string|null $qty Quantity of line item, required for level 3
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Stoke Keeping Unit
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets commoditycode
     *
     * @return string|null
     */
    public function getCommoditycode()
    {
        return $this->container['commoditycode'];
    }

    /**
     * Sets commoditycode
     *
     * @param string|null $commoditycode Commodity code for line item, required for level 3
     *
     * @return $this
     */
    public function setCommoditycode($commoditycode)
    {
        $this->container['commoditycode'] = $commoditycode;

        return $this;
    }

    /**
     * Gets discountamount
     *
     * @return string|null
     */
    public function getDiscountamount()
    {
        return $this->container['discountamount'];
    }

    /**
     * Sets discountamount
     *
     * @param string|null $discountamount Discount amount for line item, required for level 3
     *
     * @return $this
     */
    public function setDiscountamount($discountamount)
    {
        $this->container['discountamount'] = $discountamount;

        return $this;
    }

    /**
     * Gets discountrate
     *
     * @return string|null
     */
    public function getDiscountrate()
    {
        return $this->container['discountrate'];
    }

    /**
     * Sets discountrate
     *
     * @param string|null $discountrate Discount rate for line item, required for level 3
     *
     * @return $this
     */
    public function setDiscountrate($discountrate)
    {
        $this->container['discountrate'] = $discountrate;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return string|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param string|null $taxable Y for Taxable items, N for nontaxable items, required for level 3
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets taxamount
     *
     * @return string|null
     */
    public function getTaxamount()
    {
        return $this->container['taxamount'];
    }

    /**
     * Sets taxamount
     *
     * @param string|null $taxamount Tax amount for line item, required for level 3
     *
     * @return $this
     */
    public function setTaxamount($taxamount)
    {
        $this->container['taxamount'] = $taxamount;

        return $this;
    }

    /**
     * Gets taxclass
     *
     * @return string|null
     */
    public function getTaxclass()
    {
        return $this->container['taxclass'];
    }

    /**
     * Sets taxclass
     *
     * @param string|null $taxclass Tax class for line item, required for level 3
     *
     * @return $this
     */
    public function setTaxclass($taxclass)
    {
        $this->container['taxclass'] = $taxclass;

        return $this;
    }

    /**
     * Gets taxrate
     *
     * @return string|null
     */
    public function getTaxrate()
    {
        return $this->container['taxrate'];
    }

    /**
     * Sets taxrate
     *
     * @param string|null $taxrate Tax rate for line item, required for level 3
     *
     * @return $this
     */
    public function setTaxrate($taxrate)
    {
        $this->container['taxrate'] = $taxrate;

        return $this;
    }

    /**
     * Gets um
     *
     * @return string|null
     */
    public function getUm()
    {
        return $this->container['um'];
    }

    /**
     * Sets um
     *
     * @param string|null $um Unit of mearsure for line item, required for level 3
     *
     * @return $this
     */
    public function setUm($um)
    {
        $this->container['um'] = $um;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category of line item. Will only be included if the line item is a product from the database.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets location_key
     *
     * @return string|null
     */
    public function getLocationKey()
    {
        return $this->container['location_key'];
    }

    /**
     * Sets location_key
     *
     * @param string|null $location_key Unique identifier for warehouse location.
     *
     * @return $this
     */
    public function setLocationKey($location_key)
    {
        $this->container['location_key'] = $location_key;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Manufacturer of product.
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


