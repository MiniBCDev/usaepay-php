<?php
/**
 * CheckRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * CheckRequest Class Doc Comment
 *
 * @category Class
 * @description This is only needed for ACH transactions.
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CheckRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountholder' => 'string',
        'routing' => 'int',
        'account' => 'int',
        'account_type' => 'string',
        'dl_num' => 'int',
        'dl_state' => 'string',
        'number' => 'int',
        'format' => 'string',
        'flags' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountholder' => null,
        'routing' => null,
        'account' => null,
        'account_type' => null,
        'dl_num' => null,
        'dl_state' => null,
        'number' => null,
        'format' => null,
        'flags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountholder' => 'accountholder',
        'routing' => 'routing',
        'account' => 'account',
        'account_type' => 'account_type',
        'dl_num' => 'dl_num',
        'dl_state' => 'dl_state',
        'number' => 'number',
        'format' => 'format',
        'flags' => 'flags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountholder' => 'setAccountholder',
        'routing' => 'setRouting',
        'account' => 'setAccount',
        'account_type' => 'setAccountType',
        'dl_num' => 'setDlNum',
        'dl_state' => 'setDlState',
        'number' => 'setNumber',
        'format' => 'setFormat',
        'flags' => 'setFlags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountholder' => 'getAccountholder',
        'routing' => 'getRouting',
        'account' => 'getAccount',
        'account_type' => 'getAccountType',
        'dl_num' => 'getDlNum',
        'dl_state' => 'getDlState',
        'number' => 'getNumber',
        'format' => 'getFormat',
        'flags' => 'getFlags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountholder'] = isset($data['accountholder']) ? $data['accountholder'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['dl_num'] = isset($data['dl_num']) ? $data['dl_num'] : null;
        $this->container['dl_state'] = isset($data['dl_state']) ? $data['dl_state'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accountholder'] === null) {
            $invalidProperties[] = "'accountholder' can't be null";
        }
        if ($this->container['routing'] === null) {
            $invalidProperties[] = "'routing' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountholder
     *
     * @return string
     */
    public function getAccountholder()
    {
        return $this->container['accountholder'];
    }

    /**
     * Sets accountholder
     *
     * @param string $accountholder Account holder name
     *
     * @return $this
     */
    public function setAccountholder($accountholder)
    {
        $this->container['accountholder'] = $accountholder;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return int
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param int $routing Bank Routing Number
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets account
     *
     * @return int
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param int $account Bank Account Number
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of bank account.
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets dl_num
     *
     * @return int|null
     */
    public function getDlNum()
    {
        return $this->container['dl_num'];
    }

    /**
     * Sets dl_num
     *
     * @param int|null $dl_num Drivers lisence number. Used for identification.
     *
     * @return $this
     */
    public function setDlNum($dl_num)
    {
        $this->container['dl_num'] = $dl_num;

        return $this;
    }

    /**
     * Gets dl_state
     *
     * @return string|null
     */
    public function getDlState()
    {
        return $this->container['dl_state'];
    }

    /**
     * Sets dl_state
     *
     * @param string|null $dl_state Drivers lisence state. Used for identification.
     *
     * @return $this
     */
    public function setDlState($dl_state)
    {
        $this->container['dl_state'] = $dl_state;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Check number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format SEC record type/check format.
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string|null $flags Comma delimited list of special check process flags.  Not needed for most scenarios.
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


