<?php
/**
 * CustomerPaymentMethodRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customers
 *
 * Endpoints for managing customers
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * CustomerPaymentMethodRequest Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerPaymentMethodRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerPaymentMethodRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'method_name' => 'string',
        'cardholder' => 'string',
        'expiration' => 'string',
        'number' => 'string',
        'avs_street' => 'string',
        'avs_zip' => 'string',
        'routing' => 'int',
        'account' => 'int',
        'account_type' => 'string',
        'record_type' => 'string',
        'pay_type' => 'string',
        'default' => 'string',
        'sortord' => 'string',
        'added' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'method_name' => null,
        'cardholder' => null,
        'expiration' => null,
        'number' => null,
        'avs_street' => null,
        'avs_zip' => null,
        'routing' => null,
        'account' => null,
        'account_type' => null,
        'record_type' => null,
        'pay_type' => null,
        'default' => null,
        'sortord' => null,
        'added' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'method_name' => 'method_name',
        'cardholder' => 'cardholder',
        'expiration' => 'expiration',
        'number' => 'number',
        'avs_street' => 'avs_street',
        'avs_zip' => 'avs_zip',
        'routing' => 'routing',
        'account' => 'account',
        'account_type' => 'account_type',
        'record_type' => 'record_type',
        'pay_type' => 'pay_type',
        'default' => 'default',
        'sortord' => 'sortord',
        'added' => 'added'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'method_name' => 'setMethodName',
        'cardholder' => 'setCardholder',
        'expiration' => 'setExpiration',
        'number' => 'setNumber',
        'avs_street' => 'setAvsStreet',
        'avs_zip' => 'setAvsZip',
        'routing' => 'setRouting',
        'account' => 'setAccount',
        'account_type' => 'setAccountType',
        'record_type' => 'setRecordType',
        'pay_type' => 'setPayType',
        'default' => 'setDefault',
        'sortord' => 'setSortord',
        'added' => 'setAdded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'method_name' => 'getMethodName',
        'cardholder' => 'getCardholder',
        'expiration' => 'getExpiration',
        'number' => 'getNumber',
        'avs_street' => 'getAvsStreet',
        'avs_zip' => 'getAvsZip',
        'routing' => 'getRouting',
        'account' => 'getAccount',
        'account_type' => 'getAccountType',
        'record_type' => 'getRecordType',
        'pay_type' => 'getPayType',
        'default' => 'getDefault',
        'sortord' => 'getSortord',
        'added' => 'getAdded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['method_name'] = isset($data['method_name']) ? $data['method_name'] : null;
        $this->container['cardholder'] = isset($data['cardholder']) ? $data['cardholder'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['avs_street'] = isset($data['avs_street']) ? $data['avs_street'] : null;
        $this->container['avs_zip'] = isset($data['avs_zip']) ? $data['avs_zip'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['record_type'] = isset($data['record_type']) ? $data['record_type'] : null;
        $this->container['pay_type'] = isset($data['pay_type']) ? $data['pay_type'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['sortord'] = isset($data['sortord']) ? $data['sortord'] : null;
        $this->container['added'] = isset($data['added']) ? $data['added'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets method_name
     *
     * @return string|null
     */
    public function getMethodName()
    {
        return $this->container['method_name'];
    }

    /**
     * Sets method_name
     *
     * @param string|null $method_name method_name
     *
     * @return $this
     */
    public function setMethodName($method_name)
    {
        $this->container['method_name'] = $method_name;

        return $this;
    }

    /**
     * Gets cardholder
     *
     * @return string|null
     */
    public function getCardholder()
    {
        return $this->container['cardholder'];
    }

    /**
     * Sets cardholder
     *
     * @param string|null $cardholder cardholder
     *
     * @return $this
     */
    public function setCardholder($cardholder)
    {
        $this->container['cardholder'] = $cardholder;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string|null
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string|null $expiration expiration
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets avs_street
     *
     * @return string|null
     */
    public function getAvsStreet()
    {
        return $this->container['avs_street'];
    }

    /**
     * Sets avs_street
     *
     * @param string|null $avs_street avs_street
     *
     * @return $this
     */
    public function setAvsStreet($avs_street)
    {
        $this->container['avs_street'] = $avs_street;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string|null
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string|null $avs_zip avs_zip
     *
     * @return $this
     */
    public function setAvsZip($avs_zip)
    {
        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return int|null
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param int|null $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets account
     *
     * @return int|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param int|null $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type record_type
     *
     * @return $this
     */
    public function setRecordType($record_type)
    {
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type pay_type
     *
     * @return $this
     */
    public function setPayType($pay_type)
    {
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets default
     *
     * @return string|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string|null $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets sortord
     *
     * @return string|null
     */
    public function getSortord()
    {
        return $this->container['sortord'];
    }

    /**
     * Sets sortord
     *
     * @param string|null $sortord sortord
     *
     * @return $this
     */
    public function setSortord($sortord)
    {
        $this->container['sortord'] = $sortord;

        return $this;
    }

    /**
     * Gets added
     *
     * @return string|null
     */
    public function getAdded()
    {
        return $this->container['added'];
    }

    /**
     * Sets added
     *
     * @param string|null $added added
     *
     * @return $this
     */
    public function setAdded($added)
    {
        $this->container['added'] = $added;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


