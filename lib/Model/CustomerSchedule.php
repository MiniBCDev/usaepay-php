<?php
/**
 * CustomerSchedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customers
 *
 * Endpoints for managing customers
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * CustomerSchedule Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerSchedule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerSchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'type' => 'string',
        'amount' => 'string',
        'currency_code' => 'string',
        'description' => 'string',
        'enabled' => 'string',
        'frequency' => 'string',
        'next_date' => 'string',
        'numleft' => 'string',
        'orderid' => 'string',
        'receipt_note' => 'string',
        'send_receipt' => 'string',
        'source' => 'string',
        'start_date' => 'string',
        'tax' => 'string',
        'user' => 'string',
        'username' => 'string',
        'skip_count' => 'string',
        'rules' => '\USAePay\Model\CustomerRule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'type' => null,
        'amount' => null,
        'currency_code' => null,
        'description' => null,
        'enabled' => null,
        'frequency' => null,
        'next_date' => null,
        'numleft' => null,
        'orderid' => null,
        'receipt_note' => null,
        'send_receipt' => null,
        'source' => null,
        'start_date' => null,
        'tax' => null,
        'user' => null,
        'username' => null,
        'skip_count' => null,
        'rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'type' => 'type',
        'amount' => 'amount',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'enabled' => 'enabled',
        'frequency' => 'frequency',
        'next_date' => 'next_date',
        'numleft' => 'numleft',
        'orderid' => 'orderid',
        'receipt_note' => 'receipt_note',
        'send_receipt' => 'send_receipt',
        'source' => 'source',
        'start_date' => 'start_date',
        'tax' => 'tax',
        'user' => 'user',
        'username' => 'username',
        'skip_count' => 'skip_count',
        'rules' => 'rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'type' => 'setType',
        'amount' => 'setAmount',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'frequency' => 'setFrequency',
        'next_date' => 'setNextDate',
        'numleft' => 'setNumleft',
        'orderid' => 'setOrderid',
        'receipt_note' => 'setReceiptNote',
        'send_receipt' => 'setSendReceipt',
        'source' => 'setSource',
        'start_date' => 'setStartDate',
        'tax' => 'setTax',
        'user' => 'setUser',
        'username' => 'setUsername',
        'skip_count' => 'setSkipCount',
        'rules' => 'setRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'type' => 'getType',
        'amount' => 'getAmount',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'frequency' => 'getFrequency',
        'next_date' => 'getNextDate',
        'numleft' => 'getNumleft',
        'orderid' => 'getOrderid',
        'receipt_note' => 'getReceiptNote',
        'send_receipt' => 'getSendReceipt',
        'source' => 'getSource',
        'start_date' => 'getStartDate',
        'tax' => 'getTax',
        'user' => 'getUser',
        'username' => 'getUsername',
        'skip_count' => 'getSkipCount',
        'rules' => 'getRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['next_date'] = isset($data['next_date']) ? $data['next_date'] : null;
        $this->container['numleft'] = isset($data['numleft']) ? $data['numleft'] : null;
        $this->container['orderid'] = isset($data['orderid']) ? $data['orderid'] : null;
        $this->container['receipt_note'] = isset($data['receipt_note']) ? $data['receipt_note'] : null;
        $this->container['send_receipt'] = isset($data['send_receipt']) ? $data['send_receipt'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['skip_count'] = isset($data['skip_count']) ? $data['skip_count'] : null;
        $this->container['rules'] = isset($data['rules']) ? $data['rules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return string|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param string|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string|null $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets next_date
     *
     * @return string|null
     */
    public function getNextDate()
    {
        return $this->container['next_date'];
    }

    /**
     * Sets next_date
     *
     * @param string|null $next_date next_date
     *
     * @return $this
     */
    public function setNextDate($next_date)
    {
        $this->container['next_date'] = $next_date;

        return $this;
    }

    /**
     * Gets numleft
     *
     * @return string|null
     */
    public function getNumleft()
    {
        return $this->container['numleft'];
    }

    /**
     * Sets numleft
     *
     * @param string|null $numleft numleft
     *
     * @return $this
     */
    public function setNumleft($numleft)
    {
        $this->container['numleft'] = $numleft;

        return $this;
    }

    /**
     * Gets orderid
     *
     * @return string|null
     */
    public function getOrderid()
    {
        return $this->container['orderid'];
    }

    /**
     * Sets orderid
     *
     * @param string|null $orderid orderid
     *
     * @return $this
     */
    public function setOrderid($orderid)
    {
        $this->container['orderid'] = $orderid;

        return $this;
    }

    /**
     * Gets receipt_note
     *
     * @return string|null
     */
    public function getReceiptNote()
    {
        return $this->container['receipt_note'];
    }

    /**
     * Sets receipt_note
     *
     * @param string|null $receipt_note receipt_note
     *
     * @return $this
     */
    public function setReceiptNote($receipt_note)
    {
        $this->container['receipt_note'] = $receipt_note;

        return $this;
    }

    /**
     * Gets send_receipt
     *
     * @return string|null
     */
    public function getSendReceipt()
    {
        return $this->container['send_receipt'];
    }

    /**
     * Sets send_receipt
     *
     * @param string|null $send_receipt send_receipt
     *
     * @return $this
     */
    public function setSendReceipt($send_receipt)
    {
        $this->container['send_receipt'] = $send_receipt;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string|null $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets skip_count
     *
     * @return string|null
     */
    public function getSkipCount()
    {
        return $this->container['skip_count'];
    }

    /**
     * Sets skip_count
     *
     * @param string|null $skip_count skip_count
     *
     * @return $this
     */
    public function setSkipCount($skip_count)
    {
        $this->container['skip_count'] = $skip_count;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \USAePay\Model\CustomerRule[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \USAePay\Model\CustomerRule[]|null $rules rules
     *
     * @return $this
     */
    public function setRules($rules)
    {
        $this->container['rules'] = $rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


