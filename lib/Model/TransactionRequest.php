<?php
/**
 * TransactionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * TransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'command' => 'string',
        'refnum' => 'string',
        'trankey' => 'string',
        'invoice' => 'string',
        'ponum' => 'string',
        'orderid' => 'string',
        'description' => 'string',
        'comments' => 'string',
        'custkey' => 'string',
        'save_card' => 'bool',
        'save_customer' => 'bool',
        'save_customer_paymethod' => 'bool',
        'email' => 'string',
        'merchemailaddr' => 'string',
        'send_receipt' => 'bool',
        'receipt_custemail' => 'string',
        'receipt_merchemail' => 'string',
        'currency' => 'string',
        'terminal' => 'string',
        'clerk' => 'string',
        'software' => 'string',
        'clientip' => 'string',
        'ignore_duplicate' => 'bool',
        'amount' => 'double',
        'amount_detail' => '\USAePay\Model\AmountDetail',
        'creditcard' => '\USAePay\Model\CreditCardRequest',
        'check' => '\USAePay\Model\CheckRequest',
        'payment_key' => 'string',
        'traits' => '\USAePay\Model\Traits',
        'billing_address' => '\USAePay\Model\Address',
        'shipping_address' => '\USAePay\Model\Address',
        'lineitems' => '\USAePay\Model\LineItem[]',
        'custom_fields' => 'string[]',
        'customer_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'command' => null,
        'refnum' => null,
        'trankey' => null,
        'invoice' => null,
        'ponum' => null,
        'orderid' => null,
        'description' => null,
        'comments' => null,
        'custkey' => null,
        'save_card' => null,
        'save_customer' => null,
        'save_customer_paymethod' => null,
        'email' => null,
        'merchemailaddr' => null,
        'send_receipt' => null,
        'receipt_custemail' => null,
        'receipt_merchemail' => null,
        'currency' => null,
        'terminal' => null,
        'clerk' => null,
        'software' => null,
        'clientip' => null,
        'ignore_duplicate' => null,
        'amount' => 'double',
        'amount_detail' => null,
        'creditcard' => null,
        'check' => null,
        'payment_key' => null,
        'traits' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'lineitems' => null,
        'custom_fields' => null,
        'customer_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'command' => 'command',
        'refnum' => 'refnum',
        'trankey' => 'trankey',
        'invoice' => 'invoice',
        'ponum' => 'ponum',
        'orderid' => 'orderid',
        'description' => 'description',
        'comments' => 'comments',
        'custkey' => 'custkey',
        'save_card' => 'save_card',
        'save_customer' => 'save_customer',
        'save_customer_paymethod' => 'save_customer_paymethod',
        'email' => 'email',
        'merchemailaddr' => 'merchemailaddr',
        'send_receipt' => 'send_receipt',
        'receipt_custemail' => 'receipt-custemail',
        'receipt_merchemail' => 'receipt-merchemail',
        'currency' => 'currency',
        'terminal' => 'terminal',
        'clerk' => 'clerk',
        'software' => 'software',
        'clientip' => 'clientip',
        'ignore_duplicate' => 'ignore_duplicate',
        'amount' => 'amount',
        'amount_detail' => 'amount_detail',
        'creditcard' => 'creditcard',
        'check' => 'check',
        'payment_key' => 'payment_key',
        'traits' => 'traits',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'lineitems' => 'lineitems',
        'custom_fields' => 'custom_fields',
        'customer_email' => 'customer_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'command' => 'setCommand',
        'refnum' => 'setRefnum',
        'trankey' => 'setTrankey',
        'invoice' => 'setInvoice',
        'ponum' => 'setPonum',
        'orderid' => 'setOrderid',
        'description' => 'setDescription',
        'comments' => 'setComments',
        'custkey' => 'setCustkey',
        'save_card' => 'setSaveCard',
        'save_customer' => 'setSaveCustomer',
        'save_customer_paymethod' => 'setSaveCustomerPaymethod',
        'email' => 'setEmail',
        'merchemailaddr' => 'setMerchemailaddr',
        'send_receipt' => 'setSendReceipt',
        'receipt_custemail' => 'setReceiptCustemail',
        'receipt_merchemail' => 'setReceiptMerchemail',
        'currency' => 'setCurrency',
        'terminal' => 'setTerminal',
        'clerk' => 'setClerk',
        'software' => 'setSoftware',
        'clientip' => 'setClientip',
        'ignore_duplicate' => 'setIgnoreDuplicate',
        'amount' => 'setAmount',
        'amount_detail' => 'setAmountDetail',
        'creditcard' => 'setCreditcard',
        'check' => 'setCheck',
        'payment_key' => 'setPaymentKey',
        'traits' => 'setTraits',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'lineitems' => 'setLineitems',
        'custom_fields' => 'setCustomFields',
        'customer_email' => 'setCustomerEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'command' => 'getCommand',
        'refnum' => 'getRefnum',
        'trankey' => 'getTrankey',
        'invoice' => 'getInvoice',
        'ponum' => 'getPonum',
        'orderid' => 'getOrderid',
        'description' => 'getDescription',
        'comments' => 'getComments',
        'custkey' => 'getCustkey',
        'save_card' => 'getSaveCard',
        'save_customer' => 'getSaveCustomer',
        'save_customer_paymethod' => 'getSaveCustomerPaymethod',
        'email' => 'getEmail',
        'merchemailaddr' => 'getMerchemailaddr',
        'send_receipt' => 'getSendReceipt',
        'receipt_custemail' => 'getReceiptCustemail',
        'receipt_merchemail' => 'getReceiptMerchemail',
        'currency' => 'getCurrency',
        'terminal' => 'getTerminal',
        'clerk' => 'getClerk',
        'software' => 'getSoftware',
        'clientip' => 'getClientip',
        'ignore_duplicate' => 'getIgnoreDuplicate',
        'amount' => 'getAmount',
        'amount_detail' => 'getAmountDetail',
        'creditcard' => 'getCreditcard',
        'check' => 'getCheck',
        'payment_key' => 'getPaymentKey',
        'traits' => 'getTraits',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'lineitems' => 'getLineitems',
        'custom_fields' => 'getCustomFields',
        'customer_email' => 'getCustomerEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['command'] = isset($data['command']) ? $data['command'] : null;
        $this->container['refnum'] = isset($data['refnum']) ? $data['refnum'] : null;
        $this->container['trankey'] = isset($data['trankey']) ? $data['trankey'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['ponum'] = isset($data['ponum']) ? $data['ponum'] : null;
        $this->container['orderid'] = isset($data['orderid']) ? $data['orderid'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['custkey'] = isset($data['custkey']) ? $data['custkey'] : null;
        $this->container['save_card'] = isset($data['save_card']) ? $data['save_card'] : false;
        $this->container['save_customer'] = isset($data['save_customer']) ? $data['save_customer'] : false;
        $this->container['save_customer_paymethod'] = isset($data['save_customer_paymethod']) ? $data['save_customer_paymethod'] : false;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['merchemailaddr'] = isset($data['merchemailaddr']) ? $data['merchemailaddr'] : null;
        $this->container['send_receipt'] = isset($data['send_receipt']) ? $data['send_receipt'] : false;
        $this->container['receipt_custemail'] = isset($data['receipt_custemail']) ? $data['receipt_custemail'] : 'tran-api';
        $this->container['receipt_merchemail'] = isset($data['receipt_merchemail']) ? $data['receipt_merchemail'] : 'merchant';
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'USD';
        $this->container['terminal'] = isset($data['terminal']) ? $data['terminal'] : null;
        $this->container['clerk'] = isset($data['clerk']) ? $data['clerk'] : null;
        $this->container['software'] = isset($data['software']) ? $data['software'] : null;
        $this->container['clientip'] = isset($data['clientip']) ? $data['clientip'] : null;
        $this->container['ignore_duplicate'] = isset($data['ignore_duplicate']) ? $data['ignore_duplicate'] : false;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_detail'] = isset($data['amount_detail']) ? $data['amount_detail'] : null;
        $this->container['creditcard'] = isset($data['creditcard']) ? $data['creditcard'] : null;
        $this->container['check'] = isset($data['check']) ? $data['check'] : null;
        $this->container['payment_key'] = isset($data['payment_key']) ? $data['payment_key'] : null;
        $this->container['traits'] = isset($data['traits']) ? $data['traits'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['lineitems'] = isset($data['lineitems']) ? $data['lineitems'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['command'] === null) {
            $invalidProperties[] = "'command' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets command
     *
     * @return string
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string $command Specifies what type of transaction you would like to process.
     *
     * @return $this
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets refnum
     *
     * @return string|null
     */
    public function getRefnum()
    {
        return $this->container['refnum'];
    }

    /**
     * Sets refnum
     *
     * @param string|null $refnum Specifies original transaciton for commands that need one.
     *
     * @return $this
     */
    public function setRefnum($refnum)
    {
        $this->container['refnum'] = $refnum;

        return $this;
    }

    /**
     * Gets trankey
     *
     * @return string|null
     */
    public function getTrankey()
    {
        return $this->container['trankey'];
    }

    /**
     * Sets trankey
     *
     * @param string|null $trankey Specifies original transaciton for commands that need one.
     *
     * @return $this
     */
    public function setTrankey($trankey)
    {
        $this->container['trankey'] = $trankey;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string|null $invoice Custom Invoice Number to easily retrieve sale details.
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets ponum
     *
     * @return string|null
     */
    public function getPonum()
    {
        return $this->container['ponum'];
    }

    /**
     * Sets ponum
     *
     * @param string|null $ponum Customer's purchase order number. Required for level 3 processing.
     *
     * @return $this
     */
    public function setPonum($ponum)
    {
        $this->container['ponum'] = $ponum;

        return $this;
    }

    /**
     * Gets orderid
     *
     * @return string|null
     */
    public function getOrderid()
    {
        return $this->container['orderid'];
    }

    /**
     * Sets orderid
     *
     * @param string|null $orderid Custom order number assigned by merchant.
     *
     * @return $this
     */
    public function setOrderid($orderid)
    {
        $this->container['orderid'] = $orderid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Public description of the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Private comment details only visible to the merchant.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets custkey
     *
     * @return string|null
     */
    public function getCustkey()
    {
        return $this->container['custkey'];
    }

    /**
     * Sets custkey
     *
     * @param string|null $custkey Customer key for a previously saved customer. Unique gateway generated key.
     *
     * @return $this
     */
    public function setCustkey($custkey)
    {
        $this->container['custkey'] = $custkey;

        return $this;
    }

    /**
     * Gets save_card
     *
     * @return bool|null
     */
    public function getSaveCard()
    {
        return $this->container['save_card'];
    }

    /**
     * Sets save_card
     *
     * @param bool|null $save_card Set to true to save the customer information to the customer database
     *
     * @return $this
     */
    public function setSaveCard($save_card)
    {
        $this->container['save_card'] = $save_card;

        return $this;
    }

    /**
     * Gets save_customer
     *
     * @return bool|null
     */
    public function getSaveCustomer()
    {
        return $this->container['save_customer'];
    }

    /**
     * Sets save_customer
     *
     * @param bool|null $save_customer Set to true to save the customer information to the customer database
     *
     * @return $this
     */
    public function setSaveCustomer($save_customer)
    {
        $this->container['save_customer'] = $save_customer;

        return $this;
    }

    /**
     * Gets save_customer_paymethod
     *
     * @return bool|null
     */
    public function getSaveCustomerPaymethod()
    {
        return $this->container['save_customer_paymethod'];
    }

    /**
     * Sets save_customer_paymethod
     *
     * @param bool|null $save_customer_paymethod Set to true to save the customer payment method to customer profile. You must either have the save_customer flag set to true in the transaction OR pass in the custkey to attach transaction to existing customer.
     *
     * @return $this
     */
    public function setSaveCustomerPaymethod($save_customer_paymethod)
    {
        $this->container['save_customer_paymethod'] = $save_customer_paymethod;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Customer's email address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets merchemailaddr
     *
     * @return string|null
     */
    public function getMerchemailaddr()
    {
        return $this->container['merchemailaddr'];
    }

    /**
     * Sets merchemailaddr
     *
     * @param string|null $merchemailaddr Email where merchant receipt should be sent.
     *
     * @return $this
     */
    public function setMerchemailaddr($merchemailaddr)
    {
        $this->container['merchemailaddr'] = $merchemailaddr;

        return $this;
    }

    /**
     * Gets send_receipt
     *
     * @return bool|null
     */
    public function getSendReceipt()
    {
        return $this->container['send_receipt'];
    }

    /**
     * Sets send_receipt
     *
     * @param bool|null $send_receipt If set, this parameter will send an email receipt to the customer's email.
     *
     * @return $this
     */
    public function setSendReceipt($send_receipt)
    {
        $this->container['send_receipt'] = $send_receipt;

        return $this;
    }

    /**
     * Gets receipt_custemail
     *
     * @return string|null
     */
    public function getReceiptCustemail()
    {
        return $this->container['receipt_custemail'];
    }

    /**
     * Sets receipt_custemail
     *
     * @param string|null $receipt_custemail The name of the receipt template that should be used when sending a customer receipt.
     *
     * @return $this
     */
    public function setReceiptCustemail($receipt_custemail)
    {
        $this->container['receipt_custemail'] = $receipt_custemail;

        return $this;
    }

    /**
     * Gets receipt_merchemail
     *
     * @return string|null
     */
    public function getReceiptMerchemail()
    {
        return $this->container['receipt_merchemail'];
    }

    /**
     * Sets receipt_merchemail
     *
     * @param string|null $receipt_merchemail The name of the receipt template that should be used when sending a merchant receipt.
     *
     * @return $this
     */
    public function setReceiptMerchemail($receipt_merchemail)
    {
        $this->container['receipt_merchemail'] = $receipt_merchemail;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Transaction Currency (i.e. USD, EUR, GBP, etc.)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets terminal
     *
     * @return string|null
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param string|null $terminal Terminal identifier (i.e. multilane)
     *
     * @return $this
     */
    public function setTerminal($terminal)
    {
        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets clerk
     *
     * @return string|null
     */
    public function getClerk()
    {
        return $this->container['clerk'];
    }

    /**
     * Sets clerk
     *
     * @param string|null $clerk Clerk name
     *
     * @return $this
     */
    public function setClerk($clerk)
    {
        $this->container['clerk'] = $clerk;

        return $this;
    }

    /**
     * Gets software
     *
     * @return string|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param string|null $software Software name and version (useful for troubleshooting)
     *
     * @return $this
     */
    public function setSoftware($software)
    {
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets clientip
     *
     * @return string|null
     */
    public function getClientip()
    {
        return $this->container['clientip'];
    }

    /**
     * Sets clientip
     *
     * @param string|null $clientip IP address of client.  Used in conjunction with the \"Block By Host or IP\" fraud module.
     *
     * @return $this
     */
    public function setClientip($clientip)
    {
        $this->container['clientip'] = $clientip;

        return $this;
    }

    /**
     * Gets ignore_duplicate
     *
     * @return bool|null
     */
    public function getIgnoreDuplicate()
    {
        return $this->container['ignore_duplicate'];
    }

    /**
     * Sets ignore_duplicate
     *
     * @param bool|null $ignore_duplicate Set to true to bypass duplicate detection/folding.
     *
     * @return $this
     */
    public function setIgnoreDuplicate($ignore_duplicate)
    {
        $this->container['ignore_duplicate'] = $ignore_duplicate;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Public description of the transaction.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_detail
     *
     * @return \USAePay\Model\AmountDetail|null
     */
    public function getAmountDetail()
    {
        return $this->container['amount_detail'];
    }

    /**
     * Sets amount_detail
     *
     * @param \USAePay\Model\AmountDetail|null $amount_detail amount_detail
     *
     * @return $this
     */
    public function setAmountDetail($amount_detail)
    {
        $this->container['amount_detail'] = $amount_detail;

        return $this;
    }

    /**
     * Gets creditcard
     *
     * @return \USAePay\Model\CreditCardRequest|null
     */
    public function getCreditcard()
    {
        return $this->container['creditcard'];
    }

    /**
     * Sets creditcard
     *
     * @param \USAePay\Model\CreditCardRequest|null $creditcard creditcard
     *
     * @return $this
     */
    public function setCreditcard($creditcard)
    {
        $this->container['creditcard'] = $creditcard;

        return $this;
    }

    /**
     * Gets check
     *
     * @return \USAePay\Model\CheckRequest|null
     */
    public function getCheck()
    {
        return $this->container['check'];
    }

    /**
     * Sets check
     *
     * @param \USAePay\Model\CheckRequest|null $check check
     *
     * @return $this
     */
    public function setCheck($check)
    {
        $this->container['check'] = $check;

        return $this;
    }

    /**
     * Gets payment_key
     *
     * @return string|null
     */
    public function getPaymentKey()
    {
        return $this->container['payment_key'];
    }

    /**
     * Sets payment_key
     *
     * @param string|null $payment_key One time use token. Only used when using the Client JS library.
     *
     * @return $this
     */
    public function setPaymentKey($payment_key)
    {
        $this->container['payment_key'] = $payment_key;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return \USAePay\Model\Traits|null
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param \USAePay\Model\Traits|null $traits traits
     *
     * @return $this
     */
    public function setTraits($traits)
    {
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \USAePay\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \USAePay\Model\Address|null $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \USAePay\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \USAePay\Model\Address|null $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets lineitems
     *
     * @return \USAePay\Model\LineItem[]|null
     */
    public function getLineitems()
    {
        return $this->container['lineitems'];
    }

    /**
     * Sets lineitems
     *
     * @param \USAePay\Model\LineItem[]|null $lineitems lineitems
     *
     * @return $this
     */
    public function setLineitems($lineitems)
    {
        $this->container['lineitems'] = $lineitems;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return string[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param string[]|null $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email Customers email address for receipts
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


