<?php
/**
 * CreditCardRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * CreditCardRequest Class Doc Comment
 *
 * @category Class
 * @description This is only needed for credit card transactions.
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreditCardRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cardholder' => 'string',
        'number' => 'string',
        'expiration' => 'string',
        'cvc' => 'string',
        'avs_street' => 'string',
        'avs_postalcode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cardholder' => null,
        'number' => null,
        'expiration' => null,
        'cvc' => null,
        'avs_street' => null,
        'avs_postalcode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardholder' => 'cardholder',
        'number' => 'number',
        'expiration' => 'expiration',
        'cvc' => 'cvc',
        'avs_street' => 'avs_street',
        'avs_postalcode' => 'avs_postalcode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardholder' => 'setCardholder',
        'number' => 'setNumber',
        'expiration' => 'setExpiration',
        'cvc' => 'setCvc',
        'avs_street' => 'setAvsStreet',
        'avs_postalcode' => 'setAvsPostalcode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardholder' => 'getCardholder',
        'number' => 'getNumber',
        'expiration' => 'getExpiration',
        'cvc' => 'getCvc',
        'avs_street' => 'getAvsStreet',
        'avs_postalcode' => 'getAvsPostalcode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cardholder'] = isset($data['cardholder']) ? $data['cardholder'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['cvc'] = isset($data['cvc']) ? $data['cvc'] : null;
        $this->container['avs_street'] = isset($data['avs_street']) ? $data['avs_street'] : null;
        $this->container['avs_postalcode'] = isset($data['avs_postalcode']) ? $data['avs_postalcode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['expiration'] === null) {
            $invalidProperties[] = "'expiration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardholder
     *
     * @return string|null
     */
    public function getCardholder()
    {
        return $this->container['cardholder'];
    }

    /**
     * Sets cardholder
     *
     * @param string|null $cardholder Name of the Cardholder
     *
     * @return $this
     */
    public function setCardholder($cardholder)
    {
        $this->container['cardholder'] = $cardholder;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Credit card number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string $expiration Credit card expiration date. All numbers, and needs to be formatted as MMYY.
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets cvc
     *
     * @return string|null
     */
    public function getCvc()
    {
        return $this->container['cvc'];
    }

    /**
     * Sets cvc
     *
     * @param string|null $cvc Card security code.
     *
     * @return $this
     */
    public function setCvc($cvc)
    {
        $this->container['cvc'] = $cvc;

        return $this;
    }

    /**
     * Gets avs_street
     *
     * @return string|null
     */
    public function getAvsStreet()
    {
        return $this->container['avs_street'];
    }

    /**
     * Sets avs_street
     *
     * @param string|null $avs_street Street address used for verification.
     *
     * @return $this
     */
    public function setAvsStreet($avs_street)
    {
        $this->container['avs_street'] = $avs_street;

        return $this;
    }

    /**
     * Gets avs_postalcode
     *
     * @return int|null
     */
    public function getAvsPostalcode()
    {
        return $this->container['avs_postalcode'];
    }

    /**
     * Sets avs_postalcode
     *
     * @param int|null $avs_postalcode Postal code used for verificaiton.
     *
     * @return $this
     */
    public function setAvsPostalcode($avs_postalcode)
    {
        $this->container['avs_postalcode'] = $avs_postalcode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


