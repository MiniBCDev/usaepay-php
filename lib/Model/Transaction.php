<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'key' => 'string',
        'refnum' => 'string',
        'created' => 'string',
        'is_duplicate' => 'bool',
        'trantype_code' => 'string',
        'trantype' => 'string',
        'result_code' => 'string',
        'result' => 'string',
        'error_code' => 'string',
        'error' => 'string',
        'authcode' => 'string',
        'status_code' => 'string',
        'status' => 'string',
        'proc_refnum' => 'string',
        'creditcard' => '\USAePay\Model\CreditCardResponse',
        'check' => '\USAePay\Model\CheckRequest',
        'avs' => '\USAePay\Model\AVS',
        'cvc' => '\USAePay\Model\CVC',
        'batch' => '\USAePay\Model\BatchResponse',
        'amount' => 'double',
        'amount_detail' => '\USAePay\Model\AmountDetail',
        'ponum' => 'string',
        'invoice' => 'string',
        'orderid' => 'string',
        'description' => 'string',
        'billing_address' => '\USAePay\Model\Address',
        'shipping_address' => '\USAePay\Model\Address',
        'lineitems' => '\USAePay\Model\LineItem[]',
        'custom_fields' => 'string[]',
        'comments' => 'string',
        'tranterm' => 'string',
        'clerk' => 'string',
        'receipts' => '\USAePay\Model\ReceiptResponse',
        'customer' => '\USAePay\Model\CustomerResponse',
        'customer_email' => 'string',
        'bin' => '\USAePay\Model\Bin',
        'clientip' => 'string',
        'source_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'key' => null,
        'refnum' => null,
        'created' => null,
        'is_duplicate' => null,
        'trantype_code' => null,
        'trantype' => null,
        'result_code' => null,
        'result' => null,
        'error_code' => null,
        'error' => null,
        'authcode' => null,
        'status_code' => null,
        'status' => null,
        'proc_refnum' => null,
        'creditcard' => null,
        'check' => null,
        'avs' => null,
        'cvc' => null,
        'batch' => null,
        'amount' => 'double',
        'amount_detail' => null,
        'ponum' => null,
        'invoice' => null,
        'orderid' => null,
        'description' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'lineitems' => null,
        'custom_fields' => null,
        'comments' => null,
        'tranterm' => null,
        'clerk' => null,
        'receipts' => null,
        'customer' => null,
        'customer_email' => null,
        'bin' => null,
        'clientip' => null,
        'source_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'key' => 'key',
        'refnum' => 'refnum',
        'created' => 'created',
        'is_duplicate' => 'is_duplicate',
        'trantype_code' => 'trantype_code',
        'trantype' => 'trantype',
        'result_code' => 'result_code',
        'result' => 'result',
        'error_code' => 'error_code',
        'error' => 'error',
        'authcode' => 'authcode',
        'status_code' => 'status_code',
        'status' => 'status',
        'proc_refnum' => 'proc_refnum',
        'creditcard' => 'creditcard',
        'check' => 'check',
        'avs' => 'avs',
        'cvc' => 'cvc',
        'batch' => 'batch',
        'amount' => 'amount',
        'amount_detail' => 'amount_detail',
        'ponum' => 'ponum',
        'invoice' => 'invoice',
        'orderid' => 'orderid',
        'description' => 'description',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'lineitems' => 'lineitems',
        'custom_fields' => 'custom_fields',
        'comments' => 'comments',
        'tranterm' => 'tranterm',
        'clerk' => 'clerk',
        'receipts' => 'receipts',
        'customer' => 'customer',
        'customer_email' => 'customer_email',
        'bin' => 'bin',
        'clientip' => 'clientip',
        'source_name' => 'source_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'key' => 'setKey',
        'refnum' => 'setRefnum',
        'created' => 'setCreated',
        'is_duplicate' => 'setIsDuplicate',
        'trantype_code' => 'setTrantypeCode',
        'trantype' => 'setTrantype',
        'result_code' => 'setResultCode',
        'result' => 'setResult',
        'error_code' => 'setErrorCode',
        'error' => 'setError',
        'authcode' => 'setAuthcode',
        'status_code' => 'setStatusCode',
        'status' => 'setStatus',
        'proc_refnum' => 'setProcRefnum',
        'creditcard' => 'setCreditcard',
        'check' => 'setCheck',
        'avs' => 'setAvs',
        'cvc' => 'setCvc',
        'batch' => 'setBatch',
        'amount' => 'setAmount',
        'amount_detail' => 'setAmountDetail',
        'ponum' => 'setPonum',
        'invoice' => 'setInvoice',
        'orderid' => 'setOrderid',
        'description' => 'setDescription',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'lineitems' => 'setLineitems',
        'custom_fields' => 'setCustomFields',
        'comments' => 'setComments',
        'tranterm' => 'setTranterm',
        'clerk' => 'setClerk',
        'receipts' => 'setReceipts',
        'customer' => 'setCustomer',
        'customer_email' => 'setCustomerEmail',
        'bin' => 'setBin',
        'clientip' => 'setClientip',
        'source_name' => 'setSourceName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'key' => 'getKey',
        'refnum' => 'getRefnum',
        'created' => 'getCreated',
        'is_duplicate' => 'getIsDuplicate',
        'trantype_code' => 'getTrantypeCode',
        'trantype' => 'getTrantype',
        'result_code' => 'getResultCode',
        'result' => 'getResult',
        'error_code' => 'getErrorCode',
        'error' => 'getError',
        'authcode' => 'getAuthcode',
        'status_code' => 'getStatusCode',
        'status' => 'getStatus',
        'proc_refnum' => 'getProcRefnum',
        'creditcard' => 'getCreditcard',
        'check' => 'getCheck',
        'avs' => 'getAvs',
        'cvc' => 'getCvc',
        'batch' => 'getBatch',
        'amount' => 'getAmount',
        'amount_detail' => 'getAmountDetail',
        'ponum' => 'getPonum',
        'invoice' => 'getInvoice',
        'orderid' => 'getOrderid',
        'description' => 'getDescription',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'lineitems' => 'getLineitems',
        'custom_fields' => 'getCustomFields',
        'comments' => 'getComments',
        'tranterm' => 'getTranterm',
        'clerk' => 'getClerk',
        'receipts' => 'getReceipts',
        'customer' => 'getCustomer',
        'customer_email' => 'getCustomerEmail',
        'bin' => 'getBin',
        'clientip' => 'getClientip',
        'source_name' => 'getSourceName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['refnum'] = isset($data['refnum']) ? $data['refnum'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['is_duplicate'] = isset($data['is_duplicate']) ? $data['is_duplicate'] : null;
        $this->container['trantype_code'] = isset($data['trantype_code']) ? $data['trantype_code'] : null;
        $this->container['trantype'] = isset($data['trantype']) ? $data['trantype'] : null;
        $this->container['result_code'] = isset($data['result_code']) ? $data['result_code'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['authcode'] = isset($data['authcode']) ? $data['authcode'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['proc_refnum'] = isset($data['proc_refnum']) ? $data['proc_refnum'] : null;
        $this->container['creditcard'] = isset($data['creditcard']) ? $data['creditcard'] : null;
        $this->container['check'] = isset($data['check']) ? $data['check'] : null;
        $this->container['avs'] = isset($data['avs']) ? $data['avs'] : null;
        $this->container['cvc'] = isset($data['cvc']) ? $data['cvc'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_detail'] = isset($data['amount_detail']) ? $data['amount_detail'] : null;
        $this->container['ponum'] = isset($data['ponum']) ? $data['ponum'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['orderid'] = isset($data['orderid']) ? $data['orderid'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['lineitems'] = isset($data['lineitems']) ? $data['lineitems'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['tranterm'] = isset($data['tranterm']) ? $data['tranterm'] : null;
        $this->container['clerk'] = isset($data['clerk']) ? $data['clerk'] : null;
        $this->container['receipts'] = isset($data['receipts']) ? $data['receipts'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
        $this->container['clientip'] = isset($data['clientip']) ? $data['clientip'] : null;
        $this->container['source_name'] = isset($data['source_name']) ? $data['source_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Object type. This will always be transaction.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key Transaction Key. Unique gateway generated key.
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets refnum
     *
     * @return string|null
     */
    public function getRefnum()
    {
        return $this->container['refnum'];
    }

    /**
     * Sets refnum
     *
     * @param string|null $refnum Unique gateway transaction reference number.
     *
     * @return $this
     */
    public function setRefnum($refnum)
    {
        $this->container['refnum'] = $refnum;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created Date and time the transaction was created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets is_duplicate
     *
     * @return bool|null
     */
    public function getIsDuplicate()
    {
        return $this->container['is_duplicate'];
    }

    /**
     * Sets is_duplicate
     *
     * @param bool|null $is_duplicate If Y, a duplicate transaction was detected. The system is showing the response from the original transaction, rather than running a duplicate. If N, no duplicate was detected.
     *
     * @return $this
     */
    public function setIsDuplicate($is_duplicate)
    {
        $this->container['is_duplicate'] = $is_duplicate;

        return $this;
    }

    /**
     * Gets trantype_code
     *
     * @return string|null
     */
    public function getTrantypeCode()
    {
        return $this->container['trantype_code'];
    }

    /**
     * Sets trantype_code
     *
     * @param string|null $trantype_code Transaction type code.
     *
     * @return $this
     */
    public function setTrantypeCode($trantype_code)
    {
        $this->container['trantype_code'] = $trantype_code;

        return $this;
    }

    /**
     * Gets trantype
     *
     * @return string|null
     */
    public function getTrantype()
    {
        return $this->container['trantype'];
    }

    /**
     * Sets trantype
     *
     * @param string|null $trantype Transaction type description.
     *
     * @return $this
     */
    public function setTrantype($trantype)
    {
        $this->container['trantype'] = $trantype;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string|null
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string|null $result_code Result code. Possible options are: A = Approved, P = Partial Approval, D = Declined, E = Error, or V = Verification Required
     *
     * @return $this
     */
    public function setResultCode($result_code)
    {
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Description of above result_code (Approved, etc)
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code Error code if transaction received an error
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error Error message if transaction received an error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets authcode
     *
     * @return string|null
     */
    public function getAuthcode()
    {
        return $this->container['authcode'];
    }

    /**
     * Sets authcode
     *
     * @param string|null $authcode Authorization code
     *
     * @return $this
     */
    public function setAuthcode($authcode)
    {
        $this->container['authcode'] = $authcode;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code Transaction status code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Transaction status code description
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets proc_refnum
     *
     * @return string|null
     */
    public function getProcRefnum()
    {
        return $this->container['proc_refnum'];
    }

    /**
     * Sets proc_refnum
     *
     * @param string|null $proc_refnum Reference number returned from the check processor. This will not be returned by all processors.
     *
     * @return $this
     */
    public function setProcRefnum($proc_refnum)
    {
        $this->container['proc_refnum'] = $proc_refnum;

        return $this;
    }

    /**
     * Gets creditcard
     *
     * @return \USAePay\Model\CreditCardResponse|null
     */
    public function getCreditcard()
    {
        return $this->container['creditcard'];
    }

    /**
     * Sets creditcard
     *
     * @param \USAePay\Model\CreditCardResponse|null $creditcard creditcard
     *
     * @return $this
     */
    public function setCreditcard($creditcard)
    {
        $this->container['creditcard'] = $creditcard;

        return $this;
    }

    /**
     * Gets check
     *
     * @return \USAePay\Model\CheckRequest|null
     */
    public function getCheck()
    {
        return $this->container['check'];
    }

    /**
     * Sets check
     *
     * @param \USAePay\Model\CheckRequest|null $check check
     *
     * @return $this
     */
    public function setCheck($check)
    {
        $this->container['check'] = $check;

        return $this;
    }

    /**
     * Gets avs
     *
     * @return \USAePay\Model\AVS|null
     */
    public function getAvs()
    {
        return $this->container['avs'];
    }

    /**
     * Sets avs
     *
     * @param \USAePay\Model\AVS|null $avs avs
     *
     * @return $this
     */
    public function setAvs($avs)
    {
        $this->container['avs'] = $avs;

        return $this;
    }

    /**
     * Gets cvc
     *
     * @return \USAePay\Model\CVC|null
     */
    public function getCvc()
    {
        return $this->container['cvc'];
    }

    /**
     * Sets cvc
     *
     * @param \USAePay\Model\CVC|null $cvc cvc
     *
     * @return $this
     */
    public function setCvc($cvc)
    {
        $this->container['cvc'] = $cvc;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return \USAePay\Model\BatchResponse|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param \USAePay\Model\BatchResponse|null $batch batch
     *
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Total transaction amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_detail
     *
     * @return \USAePay\Model\AmountDetail|null
     */
    public function getAmountDetail()
    {
        return $this->container['amount_detail'];
    }

    /**
     * Sets amount_detail
     *
     * @param \USAePay\Model\AmountDetail|null $amount_detail amount_detail
     *
     * @return $this
     */
    public function setAmountDetail($amount_detail)
    {
        $this->container['amount_detail'] = $amount_detail;

        return $this;
    }

    /**
     * Gets ponum
     *
     * @return string|null
     */
    public function getPonum()
    {
        return $this->container['ponum'];
    }

    /**
     * Sets ponum
     *
     * @param string|null $ponum Customer's purchase order number. Required for level 3 processing.
     *
     * @return $this
     */
    public function setPonum($ponum)
    {
        $this->container['ponum'] = $ponum;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string|null $invoice Custom Invoice Number to easily retrieve sale details.
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets orderid
     *
     * @return string|null
     */
    public function getOrderid()
    {
        return $this->container['orderid'];
    }

    /**
     * Sets orderid
     *
     * @param string|null $orderid Custom order number assigned by merchant.
     *
     * @return $this
     */
    public function setOrderid($orderid)
    {
        $this->container['orderid'] = $orderid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Public description of the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \USAePay\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \USAePay\Model\Address|null $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \USAePay\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \USAePay\Model\Address|null $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets lineitems
     *
     * @return \USAePay\Model\LineItem[]|null
     */
    public function getLineitems()
    {
        return $this->container['lineitems'];
    }

    /**
     * Sets lineitems
     *
     * @param \USAePay\Model\LineItem[]|null $lineitems lineitems
     *
     * @return $this
     */
    public function setLineitems($lineitems)
    {
        $this->container['lineitems'] = $lineitems;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return string[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param string[]|null $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Private comment details only visible to the merchant.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets tranterm
     *
     * @return string|null
     */
    public function getTranterm()
    {
        return $this->container['tranterm'];
    }

    /**
     * Sets tranterm
     *
     * @param string|null $tranterm Transaction terminal description.
     *
     * @return $this
     */
    public function setTranterm($tranterm)
    {
        $this->container['tranterm'] = $tranterm;

        return $this;
    }

    /**
     * Gets clerk
     *
     * @return string|null
     */
    public function getClerk()
    {
        return $this->container['clerk'];
    }

    /**
     * Sets clerk
     *
     * @param string|null $clerk Clerk name
     *
     * @return $this
     */
    public function setClerk($clerk)
    {
        $this->container['clerk'] = $clerk;

        return $this;
    }

    /**
     * Gets receipts
     *
     * @return \USAePay\Model\ReceiptResponse|null
     */
    public function getReceipts()
    {
        return $this->container['receipts'];
    }

    /**
     * Sets receipts
     *
     * @param \USAePay\Model\ReceiptResponse|null $receipts receipts
     *
     * @return $this
     */
    public function setReceipts($receipts)
    {
        $this->container['receipts'] = $receipts;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \USAePay\Model\CustomerResponse|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \USAePay\Model\CustomerResponse|null $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email Customers email address for receipts
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return \USAePay\Model\Bin|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param \USAePay\Model\Bin|null $bin bin
     *
     * @return $this
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets clientip
     *
     * @return string|null
     */
    public function getClientip()
    {
        return $this->container['clientip'];
    }

    /**
     * Sets clientip
     *
     * @param string|null $clientip Client IP attached to transaciton
     *
     * @return $this
     */
    public function setClientip($clientip)
    {
        $this->container['clientip'] = $clientip;

        return $this;
    }

    /**
     * Gets source_name
     *
     * @return string|null
     */
    public function getSourceName()
    {
        return $this->container['source_name'];
    }

    /**
     * Sets source_name
     *
     * @param string|null $source_name API key name transaciton was run under
     *
     * @return $this
     */
    public function setSourceName($source_name)
    {
        $this->container['source_name'] = $source_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


