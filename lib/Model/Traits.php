<?php
/**
 * Traits
 *
 * PHP version 5
 *
 * @category Class
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction
 *
 * Endpoints for handling transactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 706@usaepay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace USAePay\Model;

use \ArrayAccess;
use \USAePay\ObjectSerializer;

/**
 * Traits Class Doc Comment
 *
 * @category Class
 * @description Holds transaction characteristics
 * @package  USAePay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Traits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Traits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_debt' => 'bool',
        'is_bill_pay' => 'bool',
        'is_recurring' => 'bool',
        'is_healthcare' => 'bool',
        'is_cash_advance' => 'bool',
        'secure_collection' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'is_debt' => null,
        'is_bill_pay' => null,
        'is_recurring' => null,
        'is_healthcare' => null,
        'is_cash_advance' => null,
        'secure_collection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_debt' => 'is_debt',
        'is_bill_pay' => 'is_bill_pay',
        'is_recurring' => 'is_recurring',
        'is_healthcare' => 'is_healthcare',
        'is_cash_advance' => 'is_cash_advance',
        'secure_collection' => 'secure_collection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_debt' => 'setIsDebt',
        'is_bill_pay' => 'setIsBillPay',
        'is_recurring' => 'setIsRecurring',
        'is_healthcare' => 'setIsHealthcare',
        'is_cash_advance' => 'setIsCashAdvance',
        'secure_collection' => 'setSecureCollection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_debt' => 'getIsDebt',
        'is_bill_pay' => 'getIsBillPay',
        'is_recurring' => 'getIsRecurring',
        'is_healthcare' => 'getIsHealthcare',
        'is_cash_advance' => 'getIsCashAdvance',
        'secure_collection' => 'getSecureCollection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_debt'] = isset($data['is_debt']) ? $data['is_debt'] : false;
        $this->container['is_bill_pay'] = isset($data['is_bill_pay']) ? $data['is_bill_pay'] : false;
        $this->container['is_recurring'] = isset($data['is_recurring']) ? $data['is_recurring'] : false;
        $this->container['is_healthcare'] = isset($data['is_healthcare']) ? $data['is_healthcare'] : false;
        $this->container['is_cash_advance'] = isset($data['is_cash_advance']) ? $data['is_cash_advance'] : false;
        $this->container['secure_collection'] = isset($data['secure_collection']) ? $data['secure_collection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_debt
     *
     * @return bool|null
     */
    public function getIsDebt()
    {
        return $this->container['is_debt'];
    }

    /**
     * Sets is_debt
     *
     * @param bool|null $is_debt Indicates if the transaction is existing debt.
     *
     * @return $this
     */
    public function setIsDebt($is_debt)
    {
        $this->container['is_debt'] = $is_debt;

        return $this;
    }

    /**
     * Gets is_bill_pay
     *
     * @return bool|null
     */
    public function getIsBillPay()
    {
        return $this->container['is_bill_pay'];
    }

    /**
     * Sets is_bill_pay
     *
     * @param bool|null $is_bill_pay Indicates if the transaction is bill pay.
     *
     * @return $this
     */
    public function setIsBillPay($is_bill_pay)
    {
        $this->container['is_bill_pay'] = $is_bill_pay;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool|null $is_recurring Indicates if the transaction is recurring.
     *
     * @return $this
     */
    public function setIsRecurring($is_recurring)
    {
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets is_healthcare
     *
     * @return bool|null
     */
    public function getIsHealthcare()
    {
        return $this->container['is_healthcare'];
    }

    /**
     * Sets is_healthcare
     *
     * @param bool|null $is_healthcare Indicates if the transaction is healthcare.
     *
     * @return $this
     */
    public function setIsHealthcare($is_healthcare)
    {
        $this->container['is_healthcare'] = $is_healthcare;

        return $this;
    }

    /**
     * Gets is_cash_advance
     *
     * @return bool|null
     */
    public function getIsCashAdvance()
    {
        return $this->container['is_cash_advance'];
    }

    /**
     * Sets is_cash_advance
     *
     * @param bool|null $is_cash_advance Indicates if the transaction is cash advance.
     *
     * @return $this
     */
    public function setIsCashAdvance($is_cash_advance)
    {
        $this->container['is_cash_advance'] = $is_cash_advance;

        return $this;
    }

    /**
     * Gets secure_collection
     *
     * @return int|null
     */
    public function getSecureCollection()
    {
        return $this->container['secure_collection'];
    }

    /**
     * Sets secure_collection
     *
     * @param int|null $secure_collection Pass through UCAF Collection Indicator here for MasterCard secure transactions.
     *
     * @return $this
     */
    public function setSecureCollection($secure_collection)
    {
        $this->container['secure_collection'] = $secure_collection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


